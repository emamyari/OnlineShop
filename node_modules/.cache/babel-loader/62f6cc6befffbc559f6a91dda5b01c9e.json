{"ast":null,"code":"import _defineProperty from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"H:\\\\OnlineShop\\\\src\\\\app\\\\modules\\\\GoogleMaterialExamples\\\\inputs\\\\AutocompleteExamplesPage.js\";\nvar _excluded = [\"InputProps\", \"classes\", \"ref\"],\n  _excluded2 = [\"onBlur\", \"onChange\", \"onFocus\"],\n  _excluded3 = [\"inputRef\"],\n  _excluded4 = [\"onBlur\", \"onFocus\"],\n  _excluded5 = [\"onBlur\", \"onFocus\"],\n  _excluded6 = [\"onBlur\", \"onChange\", \"onFocus\"];\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport { emphasize, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Select from \"react-select\";\nimport deburr from \"lodash/deburr\";\nimport Downshift from \"downshift\";\nimport { TextField, Popper, Paper, MenuItem, Chip, Typography, NoSsr } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Notice, KTCodeExample } from \"../../../../_metronic/_partials/controls\";\nvar suggestions = [{\n  label: \"Afghanistan\"\n}, {\n  label: \"Aland Islands\"\n}, {\n  label: \"Albania\"\n}, {\n  label: \"Algeria\"\n}, {\n  label: \"American Samoa\"\n}, {\n  label: \"Andorra\"\n}, {\n  label: \"Angola\"\n}, {\n  label: \"Anguilla\"\n}, {\n  label: \"Antarctica\"\n}, {\n  label: \"Antigua and Barbuda\"\n}, {\n  label: \"Argentina\"\n}, {\n  label: \"Armenia\"\n}, {\n  label: \"Aruba\"\n}, {\n  label: \"Australia\"\n}, {\n  label: \"Austria\"\n}, {\n  label: \"Azerbaijan\"\n}, {\n  label: \"Bahamas\"\n}, {\n  label: \"Bahrain\"\n}, {\n  label: \"Bangladesh\"\n}, {\n  label: \"Barbados\"\n}, {\n  label: \"Belarus\"\n}, {\n  label: \"Belgium\"\n}, {\n  label: \"Belize\"\n}, {\n  label: \"Benin\"\n}, {\n  label: \"Bermuda\"\n}, {\n  label: \"Bhutan\"\n}, {\n  label: \"Bolivia, Plurinational State of\"\n}, {\n  label: \"Bonaire, Sint Eustatius and Saba\"\n}, {\n  label: \"Bosnia and Herzegovina\"\n}, {\n  label: \"Botswana\"\n}, {\n  label: \"Bouvet Island\"\n}, {\n  label: \"Brazil\"\n}, {\n  label: \"British Indian Ocean Territory\"\n}, {\n  label: \"Brunei Darussalam\"\n}];\n\n// Example first\nfunction renderInput(inputProps) {\n  var InputProps = inputProps.InputProps,\n    classes = inputProps.classes,\n    ref = inputProps.ref,\n    other = _objectWithoutProperties(inputProps, _excluded);\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    InputProps: _objectSpread({\n      inputRef: ref,\n      classes: {\n        root: classes.inputRoot,\n        input: classes.inputInput\n      }\n    }, InputProps)\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }));\n}\nfunction renderSuggestion(suggestionProps) {\n  var suggestion = suggestionProps.suggestion,\n    index = suggestionProps.index,\n    itemProps = suggestionProps.itemProps,\n    highlightedIndex = suggestionProps.highlightedIndex,\n    selectedItem = suggestionProps.selectedItem;\n  var isHighlighted = highlightedIndex === index;\n  var isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\n  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({}, itemProps, {\n    key: \"suggestion1\".concat(suggestion.label),\n    selected: isHighlighted,\n    component: \"div\",\n    style: {\n      fontWeight: isSelected ? 500 : 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), suggestion.label);\n}\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({\n    label: PropTypes.string\n  }).isRequired\n};\nfunction getSuggestions(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$showEmpty = _ref.showEmpty,\n    showEmpty = _ref$showEmpty === void 0 ? false : _ref$showEmpty;\n  var inputValue = deburr(value.trim()).toLowerCase();\n  var inputLength = inputValue.length;\n  var count = 0;\n  return inputLength === 0 && !showEmpty ? [] : suggestions.filter(function (suggestion) {\n    var keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n    if (keep) {\n      count += 1;\n    }\n    return keep;\n  });\n}\nfunction DownshiftMultiple(props) {\n  var _this = this;\n  var classes = props.classes;\n  var _React$useState = React.useState(\"\"),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    inputValue = _React$useState2[0],\n    setInputValue = _React$useState2[1];\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    selectedItem = _React$useState4[0],\n    setSelectedItem = _React$useState4[1];\n  function handleKeyDown(event) {\n    if (selectedItem.length && !inputValue.length && event.key === \"Backspace\") {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n  function handleChange(item) {\n    var newSelectedItem = _toConsumableArray(selectedItem);\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [].concat(_toConsumableArray(newSelectedItem), [item]);\n    }\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n  var handleDelete = function handleDelete(item) {\n    return function () {\n      var newSelectedItem = _toConsumableArray(selectedItem);\n      newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n      setSelectedItem(newSelectedItem);\n    };\n  };\n  return /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-multiple\",\n    inputValue: inputValue,\n    onChange: handleChange,\n    selectedItem: selectedItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n      getItemProps = _ref2.getItemProps,\n      getLabelProps = _ref2.getLabelProps,\n      isOpen = _ref2.isOpen,\n      inputValue2 = _ref2.inputValue,\n      selectedItem2 = _ref2.selectedItem,\n      highlightedIndex = _ref2.highlightedIndex;\n    var _getInputProps = getInputProps({\n        onKeyDown: handleKeyDown,\n        placeholder: \"Select multiple countries\"\n      }),\n      onBlur = _getInputProps.onBlur,\n      _onChange = _getInputProps.onChange,\n      onFocus = _getInputProps.onFocus,\n      inputProps = _objectWithoutProperties(_getInputProps, _excluded2);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps(),\n      InputProps: {\n        startAdornment: selectedItem.map(function (item) {\n          return /*#__PURE__*/React.createElement(Chip, {\n            key: item,\n            tabIndex: -1,\n            label: item,\n            className: classes.chip,\n            onDelete: handleDelete(item),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }\n          });\n        }),\n        onBlur: onBlur,\n        onChange: function onChange(event) {\n          handleInputChange(event);\n          _onChange(event);\n        },\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, getSuggestions(inputValue2).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem2\n      });\n    })) : null);\n  });\n}\nDownshiftMultiple.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      height: 250\n    },\n    container: {\n      flexGrow: 1,\n      position: \"relative\"\n    },\n    paper: {\n      position: \"absolute\",\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.25)\n    },\n    inputRoot: {\n      flexWrap: \"wrap\"\n    },\n    inputInput: {\n      width: \"auto\",\n      flexGrow: 1\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n});\nvar popperNode;\n\n// Example 2\nvar useStyles2 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      height: 250\n    },\n    input: {\n      display: \"flex\",\n      padding: 0,\n      height: \"auto\"\n    },\n    valueContainer: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flex: 1,\n      alignItems: \"center\",\n      overflow: \"hidden\"\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.25)\n    },\n    chipFocused: {\n      backgroundColor: emphasize(theme.palette.type === \"light\" ? theme.palette.grey[300] : theme.palette.grey[700], 0.08)\n    },\n    noOptionsMessage: {\n      padding: theme.spacing(1, 2)\n    },\n    singleValue: {\n      fontSize: 16\n    },\n    placeholder: {\n      position: \"absolute\",\n      left: 2,\n      bottom: 6,\n      fontSize: 16\n    },\n    paper: {\n      position: \"absolute\",\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n});\nfunction NoOptionsMessage(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    color: \"textSecondary\",\n    className: props.selectProps.classes.noOptionsMessage\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nNoOptionsMessage.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\nfunction inputComponent(_ref3) {\n  var inputRef = _ref3.inputRef,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: inputRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 10\n    }\n  }));\n}\ninputComponent.propTypes = {\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\nfunction Control(props) {\n  var children = props.children,\n    innerProps = props.innerProps,\n    innerRef = props.innerRef,\n    _props$selectProps = props.selectProps,\n    classes = _props$selectProps.classes,\n    TextFieldProps = _props$selectProps.TextFieldProps;\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({\n    fullWidth: true,\n    InputProps: {\n      inputComponent: inputComponent,\n      inputProps: _objectSpread({\n        className: classes.input,\n        ref: innerRef,\n        children: children\n      }, innerProps)\n    }\n  }, TextFieldProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 5\n    }\n  }));\n}\nControl.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  selectProps: PropTypes.object.isRequired\n};\nfunction Option(props) {\n  return /*#__PURE__*/React.createElement(MenuItem, Object.assign({\n    ref: props.innerRef,\n    selected: props.isFocused,\n    component: \"div\",\n    key: \"option2\".concat(props.children),\n    style: {\n      fontWeight: props.isSelected ? 500 : 400\n    }\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nOption.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  isFocused: PropTypes.bool,\n  isSelected: PropTypes.bool\n};\nfunction Placeholder(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    color: \"textSecondary\",\n    key: props.children,\n    className: props.selectProps.classes.placeholder\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nPlaceholder.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\nfunction SingleValue(props) {\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({\n    key: props.children,\n    className: props.selectProps.classes.singleValue\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nSingleValue.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object.isRequired\n};\nfunction ValueContainer(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: props.children,\n    className: props.selectProps.classes.valueContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 5\n    }\n  }, props.children);\n}\nValueContainer.propTypes = {\n  children: PropTypes.node,\n  selectProps: PropTypes.object.isRequired\n};\nfunction MultiValue(props) {\n  return /*#__PURE__*/React.createElement(Chip, {\n    tabIndex: -1,\n    label: props.children,\n    key: \"chip2\".concat(props.children),\n    className: clsx(props.selectProps.classes.chip, _defineProperty({}, props.selectProps.classes.chipFocused, props.isFocused)),\n    onDelete: props.removeProps.onClick,\n    deleteIcon: /*#__PURE__*/React.createElement(CancelIcon, Object.assign({}, props.removeProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 5\n    }\n  });\n}\nMultiValue.propTypes = {\n  children: PropTypes.node,\n  isFocused: PropTypes.bool,\n  removeProps: PropTypes.object.isRequired,\n  selectProps: PropTypes.object.isRequired\n};\nfunction Menu(props) {\n  return /*#__PURE__*/React.createElement(Paper, Object.assign({\n    square: true,\n    key: props.children,\n    className: props.selectProps.classes.paper\n  }, props.innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 5\n    }\n  }), props.children);\n}\nMenu.propTypes = {\n  children: PropTypes.node,\n  innerProps: PropTypes.object,\n  selectProps: PropTypes.object\n};\nvar components = {\n  Control: Control,\n  Menu: Menu,\n  MultiValue: MultiValue,\n  NoOptionsMessage: NoOptionsMessage,\n  Option: Option,\n  Placeholder: Placeholder,\n  SingleValue: SingleValue,\n  ValueContainer: ValueContainer\n};\nexport default function AutocompleteExamplesPage() {\n  var _this2 = this;\n  var classes = useStyles();\n  var classes2 = useStyles2();\n  var theme = useTheme();\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    single = _React$useState6[0],\n    setSingle = _React$useState6[1];\n  var _React$useState7 = React.useState(null),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    multi = _React$useState8[0],\n    setMulti = _React$useState8[1];\n  function handleChangeSingle(value) {\n    setSingle(value);\n  }\n  function handleChangeMulti(value) {\n    setMulti(value);\n  }\n  var selectStyles = {\n    input: function input(base) {\n      return _objectSpread(_objectSpread({}, base), {}, {\n        color: theme.palette.text.primary,\n        \"& input\": {\n          font: \"inherit\"\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 9\n    }\n  }, \"The autocomplete is a normal text input enhanced by a panel of suggested options.\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"font-weight-bold\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/autocomplete/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Downshift\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, \"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/downshift-js/downshift\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 17\n    }\n  }, \"downshift\")), \". The last demo allow to clear the input and show a number of options on focus.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 15\n    }\n  }, function (_ref4) {\n    var getInputProps = _ref4.getInputProps,\n      getItemProps = _ref4.getItemProps,\n      getLabelProps = _ref4.getLabelProps,\n      getMenuProps = _ref4.getMenuProps,\n      highlightedIndex = _ref4.highlightedIndex,\n      inputValue = _ref4.inputValue,\n      isOpen = _ref4.isOpen,\n      selectedItem = _ref4.selectedItem;\n    var _getInputProps2 = getInputProps({\n        placeholder: \"Search for a country (start with a)\"\n      }),\n      onBlur = _getInputProps2.onBlur,\n      onFocus = _getInputProps2.onFocus,\n      inputProps = _objectWithoutProperties(_getInputProps2, _excluded4);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Country\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 23\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(DownshiftMultiple, {\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-popper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 15\n    }\n  }, function (_ref5) {\n    var getInputProps = _ref5.getInputProps,\n      getItemProps = _ref5.getItemProps,\n      getLabelProps = _ref5.getLabelProps,\n      getMenuProps = _ref5.getMenuProps,\n      highlightedIndex = _ref5.highlightedIndex,\n      inputValue = _ref5.inputValue,\n      isOpen = _ref5.isOpen,\n      selectedItem = _ref5.selectedItem;\n    var _getInputProps3 = getInputProps({\n        placeholder: \"With Popper\"\n      }),\n      onBlur = _getInputProps3.onBlur,\n      onFocus = _getInputProps3.onFocus,\n      inputProps = _objectWithoutProperties(_getInputProps3, _excluded5);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Country\",\n      InputProps: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      },\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      inputProps: inputProps,\n      ref: function ref(node) {\n        popperNode = node;\n      }\n    }), /*#__PURE__*/React.createElement(Popper, {\n      open: isOpen,\n      anchorEl: popperNode,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, isOpen ? getMenuProps({}, {\n      suppressRefError: true\n    }) : {}, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      square: true,\n      style: {\n        marginTop: 8,\n        width: popperNode ? popperNode.clientWidth : undefined\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })))));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Downshift, {\n    id: \"downshift-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 15\n    }\n  }, function (_ref6) {\n    var clearSelection = _ref6.clearSelection,\n      getInputProps = _ref6.getInputProps,\n      getItemProps = _ref6.getItemProps,\n      getLabelProps = _ref6.getLabelProps,\n      getMenuProps = _ref6.getMenuProps,\n      highlightedIndex = _ref6.highlightedIndex,\n      inputValue = _ref6.inputValue,\n      isOpen = _ref6.isOpen,\n      openMenu = _ref6.openMenu,\n      selectedItem = _ref6.selectedItem;\n    var _getInputProps4 = getInputProps({\n        onChange: function onChange(event) {\n          if (event.target.value === \"\") {\n            clearSelection();\n          }\n        },\n        onFocus: openMenu,\n        placeholder: \"With the clear & show empty options\"\n      }),\n      onBlur = _getInputProps4.onBlur,\n      onChange = _getInputProps4.onChange,\n      onFocus = _getInputProps4.onFocus,\n      inputProps = _objectWithoutProperties(_getInputProps4, _excluded6);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 21\n      }\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      label: \"Countries\",\n      InputLabelProps: getLabelProps({\n        shrink: true\n      }),\n      InputProps: {\n        onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus\n      },\n      inputProps: inputProps\n    }), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 23\n      }\n    }), isOpen ? /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 27\n      }\n    }, getSuggestions(inputValue, {\n      showEmpty: true\n    }).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(KTCodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"React-select\",\n    codeBlockHeight: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 13\n    }\n  }, \"In the following example, we demonstrate how to use\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/JedWatson/react-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 17\n    }\n  }, \"react-select\")), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"separator separator-dashed my-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes2.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NoSsr, {\n    key: \"nossr22\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"react-select\",\n    classes: classes2,\n    styles: selectStyles,\n    inputId: \"react-select-single\",\n    TextFieldProps: {\n      label: \"Country\",\n      InputLabelProps: {\n        htmlFor: \"react-select-single\",\n        shrink: true\n      },\n      placeholder: \"Search a country (start with a)\"\n    },\n    options: suggestions,\n    components: components,\n    value: single,\n    onChange: handleChangeSingle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes2.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    key: \"\",\n    className: \"react-select\",\n    classes: classes2,\n    styles: selectStyles,\n    inputId: \"react-select-multiple\",\n    TextFieldProps: {\n      label: \"Countries\",\n      InputLabelProps: {\n        htmlFor: \"react-select-multiple\",\n        shrink: true\n      },\n      placeholder: \"Select multiple countries\"\n    },\n    options: suggestions,\n    components: components,\n    value: multi,\n    onChange: handleChangeMulti,\n    isMulti: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 17\n    }\n  })))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport PropTypes from 'prop-types';\\nimport deburr from 'lodash/deburr';\\nimport Downshift from 'downshift';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport TextField from '@material-ui/core/TextField';\\nimport Popper from '@material-ui/core/Popper';\\nimport Paper from '@material-ui/core/Paper';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport Chip from '@material-ui/core/Chip';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n];\\n\\nfunction renderInput(inputProps) {\\n  const { InputProps, classes, ref, ...other } = inputProps;\\n\\n  return (\\n    <TextField\\n      InputProps={{\\n        inputRef: ref,\\n        classes: {\\n          root: classes.inputRoot,\\n          input: classes.inputInput,\\n        },\\n        ...InputProps,\\n      }}\\n      {...other}\\n    />\\n  );\\n}\\n\\nfunction renderSuggestion(suggestionProps) {\\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\\n  const isHighlighted = highlightedIndex === index;\\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\\n\\n  return (\\n    <MenuItem\\n      {...itemProps}\\n      key={suggestion.label}\\n      selected={isHighlighted}\\n      component=\\\"div\\\"\\n      style={{\\n        fontWeight: isSelected ? 500 : 400,\\n      }}\\n    >\\n      {suggestion.label}\\n    </MenuItem>\\n  );\\n}\\nrenderSuggestion.propTypes = {\\n  highlightedIndex: PropTypes.number,\\n  index: PropTypes.number,\\n  itemProps: PropTypes.object,\\n  selectedItem: PropTypes.string,\\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\\n};\\n\\nfunction getSuggestions(value, { showEmpty = false } = {}) {\\n  const inputValue = deburr(value.trim()).toLowerCase();\\n  const inputLength = inputValue.length;\\n  let count = 0;\\n\\n  return inputLength === 0 && !showEmpty\\n    ? []\\n    : suggestions.filter(suggestion => {\\n        const keep =\\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\\n\\n        if (keep) {\\n          count += 1;\\n        }\\n\\n        return keep;\\n      });\\n}\\n\\nfunction DownshiftMultiple(props) {\\n  const { classes } = props;\\n  const [inputValue, setInputValue] = React.useState('');\\n  const [selectedItem, setSelectedItem] = React.useState([]);\\n\\n  function handleKeyDown(event) {\\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\\n    }\\n  }\\n\\n  function handleInputChange(event) {\\n    setInputValue(event.target.value);\\n  }\\n\\n  function handleChange(item) {\\n    let newSelectedItem = [...selectedItem];\\n    if (newSelectedItem.indexOf(item) === -1) {\\n      newSelectedItem = [...newSelectedItem, item];\\n    }\\n    setInputValue('');\\n    setSelectedItem(newSelectedItem);\\n  }\\n\\n  const handleDelete = item => () => {\\n    const newSelectedItem = [...selectedItem];\\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\\n    setSelectedItem(newSelectedItem);\\n  };\\n\\n  return (\\n    <Downshift\\n      id=\\\"downshift-multiple\\\"\\n      inputValue={inputValue}\\n      onChange={handleChange}\\n      selectedItem={selectedItem}\\n    >\\n      {({\\n        getInputProps,\\n        getItemProps,\\n        getLabelProps,\\n        isOpen,\\n        inputValue: inputValue2,\\n        selectedItem: selectedItem2,\\n        highlightedIndex,\\n      }) => {\\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\\n          onKeyDown: handleKeyDown,\\n          placeholder: 'Select multiple countries',\\n        });\\n\\n        return (\\n          <div className={classes.container}>\\n            {renderInput({\\n              fullWidth: true,\\n              classes,\\n              label: 'Countries',\\n              InputLabelProps: getLabelProps(),\\n              InputProps: {\\n                startAdornment: selectedItem.map(item => (\\n                  <Chip\\n                    key={item}\\n                    tabIndex={-1}\\n                    label={item}\\n                    className={classes.chip}\\n                    onDelete={handleDelete(item)}\\n                  />\\n                )),\\n                onBlur,\\n                onChange: event => {\\n                  handleInputChange(event);\\n                  onChange(event);\\n                },\\n                onFocus,\\n              },\\n              inputProps,\\n            })}\\n\\n            {isOpen ? (\\n              <Paper className={classes.paper} square>\\n                {getSuggestions(inputValue2).map((suggestion, index) =>\\n                  renderSuggestion({\\n                    suggestion,\\n                    index,\\n                    itemProps: getItemProps({ item: suggestion.label }),\\n                    highlightedIndex,\\n                    selectedItem: selectedItem2,\\n                  }),\\n                )}\\n              </Paper>\\n            ) : null}\\n          </div>\\n        );\\n      }}\\n    </Downshift>\\n  );\\n}\\n\\nDownshiftMultiple.propTypes = {\\n  classes: PropTypes.object.isRequired,\\n};\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    flexGrow: 1,\\n    height: 250,\\n  },\\n  container: {\\n    flexGrow: 1,\\n    position: 'relative',\\n  },\\n  paper: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  chip: {\\n    margin: theme.spacing(0.5, 0.25),\\n  },\\n  inputRoot: {\\n    flexWrap: 'wrap',\\n  },\\n  inputInput: {\\n    width: 'auto',\\n    flexGrow: 1,\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nlet popperNode;\\n\\nexport default function IntegrationDownshift() {\\n  const classes = useStyles();\\n\\n  return (\\n    <div className={classes.root}>\\n      <Downshift id=\\\"downshift-simple\\\">\\n        {({\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\\n            placeholder: 'Search for a country (start with a)',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Country',\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                InputProps: { onBlur, onFocus },\\n                inputProps,\\n              })}\\n\\n              <div {...getMenuProps()}>\\n                {isOpen ? (\\n                  <Paper className={classes.paper} square>\\n                    {getSuggestions(inputValue).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                ) : null}\\n              </div>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n      <div className={classes.divider} />\\n      <DownshiftMultiple classes={classes} />\\n      <div className={classes.divider} />\\n      <Downshift id=\\\"downshift-popper\\\">\\n        {({\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\\n            placeholder: 'With Popper',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Country',\\n                InputProps: { onBlur, onFocus },\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                inputProps,\\n                ref: node => {\\n                  popperNode = node;\\n                },\\n              })}\\n\\n              <Popper open={isOpen} anchorEl={popperNode}>\\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\\n                  <Paper\\n                    square\\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\\n                  >\\n                    {getSuggestions(inputValue).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                </div>\\n              </Popper>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n      <div className={classes.divider} />\\n      <Downshift id=\\\"downshift-options\\\">\\n        {({\\n          clearSelection,\\n          getInputProps,\\n          getItemProps,\\n          getLabelProps,\\n          getMenuProps,\\n          highlightedIndex,\\n          inputValue,\\n          isOpen,\\n          openMenu,\\n          selectedItem,\\n        }) => {\\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\\n            onChange: event => {\\n              if (event.target.value === '') {\\n                clearSelection();\\n              }\\n            },\\n            onFocus: openMenu,\\n            placeholder: 'With the clear & show empty options',\\n          });\\n\\n          return (\\n            <div className={classes.container}>\\n              {renderInput({\\n                fullWidth: true,\\n                classes,\\n                label: 'Countries',\\n                InputLabelProps: getLabelProps({ shrink: true }),\\n                InputProps: { onBlur, onChange, onFocus },\\n                inputProps,\\n              })}\\n\\n              <div {...getMenuProps()}>\\n                {isOpen ? (\\n                  <Paper className={classes.paper} square>\\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\\n                      renderSuggestion({\\n                        suggestion,\\n                        index,\\n                        itemProps: getItemProps({ item: suggestion.label }),\\n                        highlightedIndex,\\n                        selectedItem,\\n                      }),\\n                    )}\\n                  </Paper>\\n                ) : null}\\n              </div>\\n            </div>\\n          );\\n        }}\\n      </Downshift>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport clsx from 'clsx';\\nimport Select from 'react-select';\\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\\nimport Typography from '@material-ui/core/Typography';\\nimport NoSsr from '@material-ui/core/NoSsr';\\nimport TextField from '@material-ui/core/TextField';\\nimport Paper from '@material-ui/core/Paper';\\nimport Chip from '@material-ui/core/Chip';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport CancelIcon from '@material-ui/icons/Cancel';\\nimport PropTypes from 'prop-types';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n].map(suggestion => ({\\n  value: suggestion.label,\\n  label: suggestion.label,\\n}));\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    flexGrow: 1,\\n    height: 250,\\n  },\\n  input: {\\n    display: 'flex',\\n    padding: 0,\\n    height: 'auto',\\n  },\\n  valueContainer: {\\n    display: 'flex',\\n    flexWrap: 'wrap',\\n    flex: 1,\\n    alignItems: 'center',\\n    overflow: 'hidden',\\n  },\\n  chip: {\\n    margin: theme.spacing(0.5, 0.25),\\n  },\\n  chipFocused: {\\n    backgroundColor: emphasize(\\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\\n      0.08,\\n    ),\\n  },\\n  noOptionsMessage: {\\n    padding: theme.spacing(1, 2),\\n  },\\n  singleValue: {\\n    fontSize: 16,\\n  },\\n  placeholder: {\\n    position: 'absolute',\\n    left: 2,\\n    bottom: 6,\\n    fontSize: 16,\\n  },\\n  paper: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nfunction NoOptionsMessage(props) {\\n  return (\\n    <Typography\\n      color=\\\"textSecondary\\\"\\n      className={props.selectProps.classes.noOptionsMessage}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nNoOptionsMessage.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction inputComponent({ inputRef, ...props }) {\\n  return <div ref={inputRef} {...props} />;\\n}\\n\\ninputComponent.propTypes = {\\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n};\\n\\nfunction Control(props) {\\n  const {\\n    children,\\n    innerProps,\\n    innerRef,\\n    selectProps: { classes, TextFieldProps },\\n  } = props;\\n\\n  return (\\n    <TextField\\n      fullWidth\\n      InputProps={{\\n        inputComponent,\\n        inputProps: {\\n          className: classes.input,\\n          ref: innerRef,\\n          children,\\n          ...innerProps,\\n        },\\n      }}\\n      {...TextFieldProps}\\n    />\\n  );\\n}\\n\\nControl.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction Option(props) {\\n  return (\\n    <MenuItem\\n      ref={props.innerRef}\\n      selected={props.isFocused}\\n      component=\\\"div\\\"\\n      style={{\\n        fontWeight: props.isSelected ? 500 : 400,\\n      }}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </MenuItem>\\n  );\\n}\\n\\nOption.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\\n  isFocused: PropTypes.bool,\\n  isSelected: PropTypes.bool,\\n};\\n\\nfunction Placeholder(props) {\\n  return (\\n    <Typography\\n      color=\\\"textSecondary\\\"\\n      className={props.selectProps.classes.placeholder}\\n      {...props.innerProps}\\n    >\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nPlaceholder.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction SingleValue(props) {\\n  return (\\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\\n      {props.children}\\n    </Typography>\\n  );\\n}\\n\\nSingleValue.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction ValueContainer(props) {\\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\\n}\\n\\nValueContainer.propTypes = {\\n  children: PropTypes.node,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction MultiValue(props) {\\n  return (\\n    <Chip\\n      tabIndex={-1}\\n      label={props.children}\\n      className={clsx(props.selectProps.classes.chip, {\\n        [props.selectProps.classes.chipFocused]: props.isFocused,\\n      })}\\n      onDelete={props.removeProps.onClick}\\n      deleteIcon={<CancelIcon {...props.removeProps} />}\\n    />\\n  );\\n}\\n\\nMultiValue.propTypes = {\\n  children: PropTypes.node,\\n  isFocused: PropTypes.bool,\\n  removeProps: PropTypes.object.isRequired,\\n  selectProps: PropTypes.object.isRequired,\\n};\\n\\nfunction Menu(props) {\\n  return (\\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\\n      {props.children}\\n    </Paper>\\n  );\\n}\\n\\nMenu.propTypes = {\\n  children: PropTypes.node,\\n  innerProps: PropTypes.object,\\n  selectProps: PropTypes.object,\\n};\\n\\nconst components = {\\n  Control,\\n  Menu,\\n  MultiValue,\\n  NoOptionsMessage,\\n  Option,\\n  Placeholder,\\n  SingleValue,\\n  ValueContainer,\\n};\\n\\nexport default function IntegrationReactSelect() {\\n  const classes = useStyles();\\n  const theme = useTheme();\\n  const [single, setSingle] = React.useState(null);\\n  const [multi, setMulti] = React.useState(null);\\n\\n  function handleChangeSingle(value) {\\n    setSingle(value);\\n  }\\n\\n  function handleChangeMulti(value) {\\n    setMulti(value);\\n  }\\n\\n  const selectStyles = {\\n    input: base => ({\\n      ...base,\\n      color: theme.palette.text.primary,\\n      '& input': {\\n        font: 'inherit',\\n      },\\n    }),\\n  };\\n\\n  return (\\n    <div className={classes.root}>\\n      <NoSsr>\\n        <Select\\n          classes={classes}\\n          styles={selectStyles}\\n          inputId=\\\"react-select-single\\\"\\n          TextFieldProps={{\\n            label: 'Country',\\n            InputLabelProps: {\\n              htmlFor: 'react-select-single',\\n              shrink: true,\\n            },\\n            placeholder: 'Search a country (start with a)',\\n          }}\\n          options={suggestions}\\n          components={components}\\n          value={single}\\n          onChange={handleChangeSingle}\\n        />\\n        <div className={classes.divider} />\\n        <Select\\n          classes={classes}\\n          styles={selectStyles}\\n          inputId=\\\"react-select-multiple\\\"\\n          TextFieldProps={{\\n            label: 'Countries',\\n            InputLabelProps: {\\n              htmlFor: 'react-select-multiple',\\n              shrink: true,\\n            },\\n            placeholder: 'Select multiple countries',\\n          }}\\n          options={suggestions}\\n          components={components}\\n          value={multi}\\n          onChange={handleChangeMulti}\\n          isMulti\\n        />\\n      </NoSsr>\\n    </div>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport deburr from 'lodash/deburr';\\nimport Autosuggest from 'react-autosuggest';\\nimport match from 'autosuggest-highlight/match';\\nimport parse from 'autosuggest-highlight/parse';\\nimport TextField from '@material-ui/core/TextField';\\nimport Paper from '@material-ui/core/Paper';\\nimport MenuItem from '@material-ui/core/MenuItem';\\nimport Popper from '@material-ui/core/Popper';\\nimport { makeStyles } from '@material-ui/core/styles';\\n\\nconst suggestions = [\\n  { label: 'Afghanistan' },\\n  { label: 'Aland Islands' },\\n  { label: 'Albania' },\\n  { label: 'Algeria' },\\n  { label: 'American Samoa' },\\n  { label: 'Andorra' },\\n  { label: 'Angola' },\\n  { label: 'Anguilla' },\\n  { label: 'Antarctica' },\\n  { label: 'Antigua and Barbuda' },\\n  { label: 'Argentina' },\\n  { label: 'Armenia' },\\n  { label: 'Aruba' },\\n  { label: 'Australia' },\\n  { label: 'Austria' },\\n  { label: 'Azerbaijan' },\\n  { label: 'Bahamas' },\\n  { label: 'Bahrain' },\\n  { label: 'Bangladesh' },\\n  { label: 'Barbados' },\\n  { label: 'Belarus' },\\n  { label: 'Belgium' },\\n  { label: 'Belize' },\\n  { label: 'Benin' },\\n  { label: 'Bermuda' },\\n  { label: 'Bhutan' },\\n  { label: 'Bolivia, Plurinational State of' },\\n  { label: 'Bonaire, Sint Eustatius and Saba' },\\n  { label: 'Bosnia and Herzegovina' },\\n  { label: 'Botswana' },\\n  { label: 'Bouvet Island' },\\n  { label: 'Brazil' },\\n  { label: 'British Indian Ocean Territory' },\\n  { label: 'Brunei Darussalam' },\\n];\\n\\nfunction renderInputComponent(inputProps) {\\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\\n\\n  return (\\n    <TextField\\n      fullWidth\\n      InputProps={{\\n        inputRef: node => {\\n          ref(node);\\n          inputRef(node);\\n        },\\n        classes: {\\n          input: classes.input,\\n        },\\n      }}\\n      {...other}\\n    />\\n  );\\n}\\n\\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\\n  const matches = match(suggestion.label, query);\\n  const parts = parse(suggestion.label, matches);\\n\\n  return (\\n    <MenuItem selected={isHighlighted} component=\\\"div\\\">\\n      <div>\\n        {parts.map(part => (\\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\\n            {part.text}\\n          </span>\\n        ))}\\n      </div>\\n    </MenuItem>\\n  );\\n}\\n\\nfunction getSuggestions(value) {\\n  const inputValue = deburr(value.trim()).toLowerCase();\\n  const inputLength = inputValue.length;\\n  let count = 0;\\n\\n  return inputLength === 0\\n    ? []\\n    : suggestions.filter(suggestion => {\\n        const keep =\\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\\n\\n        if (keep) {\\n          count += 1;\\n        }\\n\\n        return keep;\\n      });\\n}\\n\\nfunction getSuggestionValue(suggestion) {\\n  return suggestion.label;\\n}\\n\\nconst useStyles = makeStyles(theme => ({\\n  root: {\\n    height: 250,\\n    flexGrow: 1,\\n  },\\n  container: {\\n    position: 'relative',\\n  },\\n  suggestionsContainerOpen: {\\n    position: 'absolute',\\n    zIndex: 1,\\n    marginTop: theme.spacing(1),\\n    left: 0,\\n    right: 0,\\n  },\\n  suggestion: {\\n    display: 'block',\\n  },\\n  suggestionsList: {\\n    margin: 0,\\n    padding: 0,\\n    listStyleType: 'none',\\n  },\\n  divider: {\\n    height: theme.spacing(2),\\n  },\\n}));\\n\\nexport default function IntegrationAutosuggest() {\\n  const classes = useStyles();\\n  const [anchorEl, setAnchorEl] = React.useState(null);\\n  const [state, setState] = React.useState({\\n    single: '',\\n    popper: '',\\n  });\\n\\n  const [stateSuggestions, setSuggestions] = React.useState([]);\\n\\n  const handleSuggestionsFetchRequested = ({ value }) => {\\n    setSuggestions(getSuggestions(value));\\n  };\\n\\n  const handleSuggestionsClearRequested = () => {\\n    setSuggestions([]);\\n  };\\n\\n  const handleChange = name => (event, { newValue }) => {\\n    setState({\\n      ...state,\\n      [name]: newValue,\\n    });\\n  };\\n\\n  const autosuggestProps = {\\n    renderInputComponent,\\n    suggestions: stateSuggestions,\\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\\n    getSuggestionValue,\\n    renderSuggestion,\\n  };\\n\\n  return (\\n    <div className={classes.root}>\\n      <Autosuggest\\n        {...autosuggestProps}\\n        inputProps={{\\n          classes,\\n          id: 'react-autosuggest-simple',\\n          label: 'Country',\\n          placeholder: 'Search a country (start with a)',\\n          value: state.single,\\n          onChange: handleChange('single'),\\n        }}\\n        theme={{\\n          container: classes.container,\\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\\n          suggestionsList: classes.suggestionsList,\\n          suggestion: classes.suggestion,\\n        }}\\n        renderSuggestionsContainer={options => (\\n          <Paper {...options.containerProps} square>\\n            {options.children}\\n          </Paper>\\n        )}\\n      />\\n      <div className={classes.divider} />\\n      <Autosuggest\\n        {...autosuggestProps}\\n        inputProps={{\\n          classes,\\n          id: 'react-autosuggest-popper',\\n          label: 'Country',\\n          placeholder: 'With Popper',\\n          value: state.popper,\\n          onChange: handleChange('popper'),\\n          inputRef: node => {\\n            setAnchorEl(node);\\n          },\\n          InputLabelProps: {\\n            shrink: true,\\n          },\\n        }}\\n        theme={{\\n          suggestionsList: classes.suggestionsList,\\n          suggestion: classes.suggestion,\\n        }}\\n        renderSuggestionsContainer={options => (\\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\\n            <Paper\\n              square\\n              {...options.containerProps}\\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\\n            >\\n              {options.children}\\n            </Paper>\\n          </Popper>\\n        )}\\n      />\\n    </div>\\n  );\\n}\\n\";","map":{"version":3,"names":["React","emphasize","makeStyles","useTheme","clsx","Select","deburr","Downshift","TextField","Popper","Paper","MenuItem","Chip","Typography","NoSsr","PropTypes","CancelIcon","Notice","KTCodeExample","suggestions","label","renderInput","inputProps","InputProps","classes","ref","other","_objectWithoutProperties","_excluded","createElement","Object","assign","_objectSpread","inputRef","root","inputRoot","input","inputInput","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","renderSuggestion","suggestionProps","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","key","concat","selected","component","style","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","_ref","arguments","length","undefined","_ref$showEmpty","showEmpty","inputValue","trim","toLowerCase","inputLength","count","filter","keep","slice","DownshiftMultiple","props","_this","_React$useState","useState","_React$useState2","_slicedToArray","setInputValue","_React$useState3","_React$useState4","setSelectedItem","handleKeyDown","event","handleInputChange","target","handleChange","item","newSelectedItem","_toConsumableArray","handleDelete","splice","id","onChange","_ref2","getInputProps","getItemProps","getLabelProps","isOpen","inputValue2","selectedItem2","_getInputProps","onKeyDown","placeholder","onBlur","onFocus","_excluded2","className","container","fullWidth","InputLabelProps","startAdornment","map","tabIndex","chip","onDelete","paper","square","useStyles","theme","flexGrow","height","position","zIndex","marginTop","spacing","left","right","margin","flexWrap","width","divider","popperNode","useStyles2","display","padding","valueContainer","flex","alignItems","overflow","chipFocused","backgroundColor","palette","type","grey","noOptionsMessage","singleValue","fontSize","bottom","NoOptionsMessage","color","selectProps","innerProps","children","node","inputComponent","_ref3","_excluded3","oneOfType","func","Control","innerRef","_props$selectProps","TextFieldProps","Option","isFocused","bool","Placeholder","SingleValue","ValueContainer","MultiValue","_defineProperty","removeProps","onClick","deleteIcon","Menu","components","AutocompleteExamplesPage","_this2","classes2","_React$useState5","_React$useState6","single","setSingle","_React$useState7","_React$useState8","multi","setMulti","handleChangeSingle","handleChangeMulti","selectStyles","base","text","primary","font","Fragment","icon","rel","href","jsCode","jsCode1","beforeCodeTitle","codeBlockHeight","_ref4","getMenuProps","_getInputProps2","_excluded4","shrink","_ref5","_getInputProps3","_excluded5","open","anchorEl","suppressRefError","clientWidth","_ref6","clearSelection","openMenu","_getInputProps4","_excluded6","jsCode2","styles","inputId","htmlFor","options","isMulti","jsCode3"],"sources":["H:/OnlineShop/src/app/modules/GoogleMaterialExamples/inputs/AutocompleteExamplesPage.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport {emphasize, makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Select from \"react-select\";\r\nimport deburr from \"lodash/deburr\";\r\nimport Downshift from \"downshift\";\r\nimport {\r\n  TextField,\r\n  Popper,\r\n  Paper,\r\n  MenuItem,\r\n  Chip,\r\n  Typography,\r\n  NoSsr\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {Notice, KTCodeExample} from \"../../../../_metronic/_partials/controls\";\r\n\r\nconst suggestions = [\r\n  { label: \"Afghanistan\" },\r\n  { label: \"Aland Islands\" },\r\n  { label: \"Albania\" },\r\n  { label: \"Algeria\" },\r\n  { label: \"American Samoa\" },\r\n  { label: \"Andorra\" },\r\n  { label: \"Angola\" },\r\n  { label: \"Anguilla\" },\r\n  { label: \"Antarctica\" },\r\n  { label: \"Antigua and Barbuda\" },\r\n  { label: \"Argentina\" },\r\n  { label: \"Armenia\" },\r\n  { label: \"Aruba\" },\r\n  { label: \"Australia\" },\r\n  { label: \"Austria\" },\r\n  { label: \"Azerbaijan\" },\r\n  { label: \"Bahamas\" },\r\n  { label: \"Bahrain\" },\r\n  { label: \"Bangladesh\" },\r\n  { label: \"Barbados\" },\r\n  { label: \"Belarus\" },\r\n  { label: \"Belgium\" },\r\n  { label: \"Belize\" },\r\n  { label: \"Benin\" },\r\n  { label: \"Bermuda\" },\r\n  { label: \"Bhutan\" },\r\n  { label: \"Bolivia, Plurinational State of\" },\r\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\r\n  { label: \"Bosnia and Herzegovina\" },\r\n  { label: \"Botswana\" },\r\n  { label: \"Bouvet Island\" },\r\n  { label: \"Brazil\" },\r\n  { label: \"British Indian Ocean Territory\" },\r\n  { label: \"Brunei Darussalam\" }\r\n];\r\n\r\n// Example first\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput\r\n        },\r\n        ...InputProps\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const {\r\n    suggestion,\r\n    index,\r\n    itemProps,\r\n    highlightedIndex,\r\n    selectedItem\r\n  } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || \"\").indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={`suggestion1${suggestion.label}`}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 &&\r\n          suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (\r\n      selectedItem.length &&\r\n      !inputValue.length &&\r\n      event.key === \"Backspace\"\r\n    ) {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue(\"\");\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: \"Select multiple countries\"\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: \"Countries\",\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus\r\n              },\r\n              inputProps\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2\r\n                  })\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: \"relative\"\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  inputRoot: {\r\n    flexWrap: \"wrap\"\r\n  },\r\n  inputInput: {\r\n    width: \"auto\",\r\n    flexGrow: 1\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nlet popperNode;\r\n\r\n// Example 2\r\nconst useStyles2 = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    padding: 0,\r\n    height: \"auto\"\r\n  },\r\n  valueContainer: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    overflow: \"hidden\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25)\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[300]\r\n        : theme.palette.grey[700],\r\n      0.08\r\n    )\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  singleValue: {\r\n    fontSize: 16\r\n  },\r\n  placeholder: {\r\n    position: \"absolute\",\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps }\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps\r\n        }\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      key={`option2${props.children}`}\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      key={props.children}\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography\r\n      key={props.children}\r\n      className={props.selectProps.classes.singleValue}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return (\r\n    <div\r\n      key={props.children}\r\n      className={props.selectProps.classes.valueContainer}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      key={`chip2${props.children}`}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper\r\n      square\r\n      key={props.children}\r\n      className={props.selectProps.classes.paper}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer\r\n};\r\n\r\nexport default function AutocompleteExamplesPage() {\r\n  const classes = useStyles();\r\n\r\n  const classes2 = useStyles2();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      \"& input\": {\r\n        font: \"inherit\"\r\n      }\r\n    })\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning font-primary\">\r\n        <span>\r\n          The autocomplete is a normal text input enhanced by a panel of\r\n          suggested options.\r\n        </span>{\" \"}\r\n        <span>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"font-weight-bold\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/autocomplete/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </span>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode1}\r\n            beforeCodeTitle=\"Downshift\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <div>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/downshift-js/downshift\">\r\n                <code>downshift</code>\r\n              </a>\r\n              . The last demo allow to clear the input and show a number of\r\n              options on focus.\r\n            </div>\r\n            <div className=\"separator separator-dashed my-7\"></div>\r\n            <div className={classes.root}>\r\n              <Downshift id=\"downshift-simple\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"Search for a country (start with a)\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <DownshiftMultiple classes={classes} />\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-popper\">\r\n                {({\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  selectedItem\r\n                }) => {\r\n                  const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                    placeholder: \"With Popper\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Country\",\r\n                        InputProps: { onBlur, onFocus },\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        inputProps,\r\n                        ref: node => {\r\n                          popperNode = node;\r\n                        }\r\n                      })}\r\n\r\n                      <Popper open={isOpen} anchorEl={popperNode}>\r\n                        <div\r\n                          {...(isOpen\r\n                            ? getMenuProps({}, { suppressRefError: true })\r\n                            : {})}\r\n                        >\r\n                          <Paper\r\n                            square\r\n                            style={{\r\n                              marginTop: 8,\r\n                              width: popperNode\r\n                                ? popperNode.clientWidth\r\n                                : undefined\r\n                            }}\r\n                          >\r\n                            {getSuggestions(inputValue).map(\r\n                              (suggestion, index) =>\r\n                                renderSuggestion({\r\n                                  suggestion,\r\n                                  index,\r\n                                  itemProps: getItemProps({\r\n                                    item: suggestion.label\r\n                                  }),\r\n                                  highlightedIndex,\r\n                                  selectedItem\r\n                                })\r\n                            )}\r\n                          </Paper>\r\n                        </div>\r\n                      </Popper>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n              <div className={classes.divider} />\r\n              <Downshift id=\"downshift-options\">\r\n                {({\r\n                  clearSelection,\r\n                  getInputProps,\r\n                  getItemProps,\r\n                  getLabelProps,\r\n                  getMenuProps,\r\n                  highlightedIndex,\r\n                  inputValue,\r\n                  isOpen,\r\n                  openMenu,\r\n                  selectedItem\r\n                }) => {\r\n                  const {\r\n                    onBlur,\r\n                    onChange,\r\n                    onFocus,\r\n                    ...inputProps\r\n                  } = getInputProps({\r\n                    onChange: event => {\r\n                      if (event.target.value === \"\") {\r\n                        clearSelection();\r\n                      }\r\n                    },\r\n                    onFocus: openMenu,\r\n                    placeholder: \"With the clear & show empty options\"\r\n                  });\r\n\r\n                  return (\r\n                    <div className={classes.container}>\r\n                      {renderInput({\r\n                        fullWidth: true,\r\n                        classes,\r\n                        label: \"Countries\",\r\n                        InputLabelProps: getLabelProps({ shrink: true }),\r\n                        InputProps: { onBlur, onChange, onFocus },\r\n                        inputProps\r\n                      })}\r\n\r\n                      <div {...getMenuProps()}>\r\n                        {isOpen ? (\r\n                          <Paper className={classes.paper} square>\r\n                            {getSuggestions(inputValue, {\r\n                              showEmpty: true\r\n                            }).map((suggestion, index) =>\r\n                              renderSuggestion({\r\n                                suggestion,\r\n                                index,\r\n                                itemProps: getItemProps({\r\n                                  item: suggestion.label\r\n                                }),\r\n                                highlightedIndex,\r\n                                selectedItem\r\n                              })\r\n                            )}\r\n                          </Paper>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Downshift>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <KTCodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"React-select\"\r\n            codeBlockHeight=\"400px\"\r\n          >\r\n            <span>\r\n              In the following example, we demonstrate how to use{\" \"}\r\n              <a href=\"https://github.com/JedWatson/react-select\">\r\n                <code>react-select</code>\r\n              </a>\r\n              .\r\n            </span>\r\n            <div className=\"separator separator-dashed my-7\" />\r\n            <div className={classes2.root}>\r\n              <NoSsr key=\"nossr22\">\r\n                <Select\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-single\"\r\n                  TextFieldProps={{\r\n                    label: \"Country\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-single\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Search a country (start with a)\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={single}\r\n                  onChange={handleChangeSingle}\r\n                />\r\n                <div className={classes2.divider} />\r\n                <Select\r\n                  key={\"\"}\r\n                  className=\"react-select\"\r\n                  classes={classes2}\r\n                  styles={selectStyles}\r\n                  inputId=\"react-select-multiple\"\r\n                  TextFieldProps={{\r\n                    label: \"Countries\",\r\n                    InputLabelProps: {\r\n                      htmlFor: \"react-select-multiple\",\r\n                      shrink: true\r\n                    },\r\n                    placeholder: \"Select multiple countries\"\r\n                  }}\r\n                  options={suggestions}\r\n                  components={components}\r\n                  value={multi}\r\n                  onChange={handleChangeMulti}\r\n                  isMulti\r\n                />\r\n              </NoSsr>\r\n            </div>\r\n          </KTCodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deburr from 'lodash/deburr';\r\nimport Downshift from 'downshift';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInput(inputProps) {\r\n  const { InputProps, classes, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: ref,\r\n        classes: {\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        },\r\n        ...InputProps,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n  const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\r\n  const isHighlighted = highlightedIndex === index;\r\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\r\n\r\n  return (\r\n    <MenuItem\r\n      {...itemProps}\r\n      key={suggestion.label}\r\n      selected={isHighlighted}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: isSelected ? 500 : 400,\r\n      }}\r\n    >\r\n      {suggestion.label}\r\n    </MenuItem>\r\n  );\r\n}\r\nrenderSuggestion.propTypes = {\r\n  highlightedIndex: PropTypes.number,\r\n  index: PropTypes.number,\r\n  itemProps: PropTypes.object,\r\n  selectedItem: PropTypes.string,\r\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\r\n};\r\n\r\nfunction getSuggestions(value, { showEmpty = false } = {}) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0 && !showEmpty\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction DownshiftMultiple(props) {\r\n  const { classes } = props;\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [selectedItem, setSelectedItem] = React.useState([]);\r\n\r\n  function handleKeyDown(event) {\r\n    if (selectedItem.length && !inputValue.length && event.key === 'Backspace') {\r\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n    }\r\n  }\r\n\r\n  function handleInputChange(event) {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  function handleChange(item) {\r\n    let newSelectedItem = [...selectedItem];\r\n    if (newSelectedItem.indexOf(item) === -1) {\r\n      newSelectedItem = [...newSelectedItem, item];\r\n    }\r\n    setInputValue('');\r\n    setSelectedItem(newSelectedItem);\r\n  }\r\n\r\n  const handleDelete = item => () => {\r\n    const newSelectedItem = [...selectedItem];\r\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n    setSelectedItem(newSelectedItem);\r\n  };\r\n\r\n  return (\r\n    <Downshift\r\n      id=\"downshift-multiple\"\r\n      inputValue={inputValue}\r\n      onChange={handleChange}\r\n      selectedItem={selectedItem}\r\n    >\r\n      {({\r\n        getInputProps,\r\n        getItemProps,\r\n        getLabelProps,\r\n        isOpen,\r\n        inputValue: inputValue2,\r\n        selectedItem: selectedItem2,\r\n        highlightedIndex,\r\n      }) => {\r\n        const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n          onKeyDown: handleKeyDown,\r\n          placeholder: 'Select multiple countries',\r\n        });\r\n\r\n        return (\r\n          <div className={classes.container}>\r\n            {renderInput({\r\n              fullWidth: true,\r\n              classes,\r\n              label: 'Countries',\r\n              InputLabelProps: getLabelProps(),\r\n              InputProps: {\r\n                startAdornment: selectedItem.map(item => (\r\n                  <Chip\r\n                    key={item}\r\n                    tabIndex={-1}\r\n                    label={item}\r\n                    className={classes.chip}\r\n                    onDelete={handleDelete(item)}\r\n                  />\r\n                )),\r\n                onBlur,\r\n                onChange: event => {\r\n                  handleInputChange(event);\r\n                  onChange(event);\r\n                },\r\n                onFocus,\r\n              },\r\n              inputProps,\r\n            })}\r\n\r\n            {isOpen ? (\r\n              <Paper className={classes.paper} square>\r\n                {getSuggestions(inputValue2).map((suggestion, index) =>\r\n                  renderSuggestion({\r\n                    suggestion,\r\n                    index,\r\n                    itemProps: getItemProps({ item: suggestion.label }),\r\n                    highlightedIndex,\r\n                    selectedItem: selectedItem2,\r\n                  }),\r\n                )}\r\n              </Paper>\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }}\r\n    </Downshift>\r\n  );\r\n}\r\n\r\nDownshiftMultiple.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  container: {\r\n    flexGrow: 1,\r\n    position: 'relative',\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  inputRoot: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  inputInput: {\r\n    width: 'auto',\r\n    flexGrow: 1,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nlet popperNode;\r\n\r\nexport default function IntegrationDownshift() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Downshift id=\"downshift-simple\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'Search for a country (start with a)',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <DownshiftMultiple classes={classes} />\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-popper\">\r\n        {({\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n            placeholder: 'With Popper',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Country',\r\n                InputProps: { onBlur, onFocus },\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                inputProps,\r\n                ref: node => {\r\n                  popperNode = node;\r\n                },\r\n              })}\r\n\r\n              <Popper open={isOpen} anchorEl={popperNode}>\r\n                <div {...(isOpen ? getMenuProps({}, { suppressRefError: true }) : {})}>\r\n                  <Paper\r\n                    square\r\n                    style={{ marginTop: 8, width: popperNode ? popperNode.clientWidth : undefined }}\r\n                  >\r\n                    {getSuggestions(inputValue).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                </div>\r\n              </Popper>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n      <div className={classes.divider} />\r\n      <Downshift id=\"downshift-options\">\r\n        {({\r\n          clearSelection,\r\n          getInputProps,\r\n          getItemProps,\r\n          getLabelProps,\r\n          getMenuProps,\r\n          highlightedIndex,\r\n          inputValue,\r\n          isOpen,\r\n          openMenu,\r\n          selectedItem,\r\n        }) => {\r\n          const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n            onChange: event => {\r\n              if (event.target.value === '') {\r\n                clearSelection();\r\n              }\r\n            },\r\n            onFocus: openMenu,\r\n            placeholder: 'With the clear & show empty options',\r\n          });\r\n\r\n          return (\r\n            <div className={classes.container}>\r\n              {renderInput({\r\n                fullWidth: true,\r\n                classes,\r\n                label: 'Countries',\r\n                InputLabelProps: getLabelProps({ shrink: true }),\r\n                InputProps: { onBlur, onChange, onFocus },\r\n                inputProps,\r\n              })}\r\n\r\n              <div {...getMenuProps()}>\r\n                {isOpen ? (\r\n                  <Paper className={classes.paper} square>\r\n                    {getSuggestions(inputValue, { showEmpty: true }).map((suggestion, index) =>\r\n                      renderSuggestion({\r\n                        suggestion,\r\n                        index,\r\n                        itemProps: getItemProps({ item: suggestion.label }),\r\n                        highlightedIndex,\r\n                        selectedItem,\r\n                      }),\r\n                    )}\r\n                  </Paper>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Downshift>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport Select from 'react-select';\r\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n].map(suggestion => ({\r\n  value: suggestion.label,\r\n  label: suggestion.label,\r\n}));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: 250,\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    padding: 0,\r\n    height: 'auto',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\r\n      0.08,\r\n    ),\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  singleValue: {\r\n    fontSize: 16,\r\n  },\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps },\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps,\r\n        },\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400,\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused,\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object,\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer,\r\n};\r\n\r\nexport default function IntegrationReactSelect() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n  const [multi, setMulti] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n    setSingle(value);\r\n  }\r\n\r\n  function handleChangeMulti(value) {\r\n    setMulti(value);\r\n  }\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      '& input': {\r\n        font: 'inherit',\r\n      },\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NoSsr>\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-single\"\r\n          TextFieldProps={{\r\n            label: 'Country',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-single',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Search a country (start with a)',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={single}\r\n          onChange={handleChangeSingle}\r\n        />\r\n        <div className={classes.divider} />\r\n        <Select\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-multiple\"\r\n          TextFieldProps={{\r\n            label: 'Countries',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-multiple',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Select multiple countries',\r\n          }}\r\n          options={suggestions}\r\n          components={components}\r\n          value={multi}\r\n          onChange={handleChangeMulti}\r\n          isMulti\r\n        />\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst suggestions = [\r\n  { label: 'Afghanistan' },\r\n  { label: 'Aland Islands' },\r\n  { label: 'Albania' },\r\n  { label: 'Algeria' },\r\n  { label: 'American Samoa' },\r\n  { label: 'Andorra' },\r\n  { label: 'Angola' },\r\n  { label: 'Anguilla' },\r\n  { label: 'Antarctica' },\r\n  { label: 'Antigua and Barbuda' },\r\n  { label: 'Argentina' },\r\n  { label: 'Armenia' },\r\n  { label: 'Aruba' },\r\n  { label: 'Australia' },\r\n  { label: 'Austria' },\r\n  { label: 'Azerbaijan' },\r\n  { label: 'Bahamas' },\r\n  { label: 'Bahrain' },\r\n  { label: 'Bangladesh' },\r\n  { label: 'Barbados' },\r\n  { label: 'Belarus' },\r\n  { label: 'Belgium' },\r\n  { label: 'Belize' },\r\n  { label: 'Benin' },\r\n  { label: 'Bermuda' },\r\n  { label: 'Bhutan' },\r\n  { label: 'Bolivia, Plurinational State of' },\r\n  { label: 'Bonaire, Sint Eustatius and Saba' },\r\n  { label: 'Bosnia and Herzegovina' },\r\n  { label: 'Botswana' },\r\n  { label: 'Bouvet Island' },\r\n  { label: 'Brazil' },\r\n  { label: 'British Indian Ocean Territory' },\r\n  { label: 'Brunei Darussalam' },\r\n];\r\n\r\nfunction renderInputComponent(inputProps) {\r\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputRef: node => {\r\n          ref(node);\r\n          inputRef(node);\r\n        },\r\n        classes: {\r\n          input: classes.input,\r\n        },\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n  const matches = match(suggestion.label, query);\r\n  const parts = parse(suggestion.label, matches);\r\n\r\n  return (\r\n    <MenuItem selected={isHighlighted} component=\"div\">\r\n      <div>\r\n        {parts.map(part => (\r\n          <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n            {part.text}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n  const inputValue = deburr(value.trim()).toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  let count = 0;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : suggestions.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: 250,\r\n    flexGrow: 1,\r\n  },\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  suggestionsContainerOpen: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  suggestion: {\r\n    display: 'block',\r\n  },\r\n  suggestionsList: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyleType: 'none',\r\n  },\r\n  divider: {\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function IntegrationAutosuggest() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [state, setState] = React.useState({\r\n    single: '',\r\n    popper: '',\r\n  });\r\n\r\n  const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n  const handleSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  const handleSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const handleChange = name => (event, { newValue }) => {\r\n    setState({\r\n      ...state,\r\n      [name]: newValue,\r\n    });\r\n  };\r\n\r\n  const autosuggestProps = {\r\n    renderInputComponent,\r\n    suggestions: stateSuggestions,\r\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n    getSuggestionValue,\r\n    renderSuggestion,\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-simple',\r\n          label: 'Country',\r\n          placeholder: 'Search a country (start with a)',\r\n          value: state.single,\r\n          onChange: handleChange('single'),\r\n        }}\r\n        theme={{\r\n          container: classes.container,\r\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Paper {...options.containerProps} square>\r\n            {options.children}\r\n          </Paper>\r\n        )}\r\n      />\r\n      <div className={classes.divider} />\r\n      <Autosuggest\r\n        {...autosuggestProps}\r\n        inputProps={{\r\n          classes,\r\n          id: 'react-autosuggest-popper',\r\n          label: 'Country',\r\n          placeholder: 'With Popper',\r\n          value: state.popper,\r\n          onChange: handleChange('popper'),\r\n          inputRef: node => {\r\n            setAnchorEl(node);\r\n          },\r\n          InputLabelProps: {\r\n            shrink: true,\r\n          },\r\n        }}\r\n        theme={{\r\n          suggestionsList: classes.suggestionsList,\r\n          suggestion: classes.suggestion,\r\n        }}\r\n        renderSuggestionsContainer={options => (\r\n          <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\r\n            <Paper\r\n              square\r\n              {...options.containerProps}\r\n              style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\r\n            >\r\n              {options.children}\r\n            </Paper>\r\n          </Popper>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}