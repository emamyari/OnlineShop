{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Saeed\\\\Desktop\\\\onlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Saeed\\\\Desktop\\\\onlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(function (_ref) {\n    var data = _ref.data;\n    var _JSON$parse = JSON.parse(data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n    if (email && password) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase() && x.password === password;\n      });\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n    var _JSON$parse2 = JSON.parse(data),\n      email = _JSON$parse2.email,\n      fullname = _JSON$parse2.fullname,\n      username = _JSON$parse2.username,\n      password = _JSON$parse2.password;\n    if (email && fullname && username && password) {\n      var user = {\n        id: generateUserId(),\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        firstname: fullname,\n        lastname: \"Stark\",\n        roles: [2],\n        // Manager\n        authToken: \"auth-token-\" + Math.random(),\n        refreshToken: \"auth-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(user);\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref3) {\n    var data = _ref3.data;\n    var _JSON$parse3 = JSON.parse(data),\n      email = _JSON$parse3.email;\n    if (email) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n      if (user) {\n        user.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(function (_ref4) {\n    var Authorization = _ref4.headers.Authorization;\n    var authToken = Authorization && Authorization.startsWith(\"Bearer \") && Authorization.slice(\"Bearer \".length);\n    if (authToken) {\n      var user = userTableMock.find(function (x) {\n        return x.authToken === authToken;\n      });\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n    return [401];\n  });\n  function generateUserId() {\n    var ids = userTableMock.map(function (el) {\n      return el.id;\n    });\n    var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n    return maxId + 1;\n  }\n}","map":{"version":3,"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","_ref","data","_JSON$parse","JSON","parse","email","password","user","find","x","toLowerCase","_objectSpread","undefined","_ref2","_JSON$parse2","fullname","username","id","generateUserId","firstname","lastname","roles","authToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","_ref3","_JSON$parse3","onGet","_ref4","Authorization","headers","startsWith","slice","length","ids","map","el","maxId","max","apply","_toConsumableArray"],"sources":["C:/Users/Saeed/Desktop/onlineShop/src/app/modules/Auth/__mocks__/mockAuth.js"],"sourcesContent":["import {\r\n  LOGIN_URL,\r\n  ME_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL,\r\n} from \"../_redux/authCrud\";\r\nimport userTableMock from \"./userTableMock\";\r\n\r\nexport default function mockAuth(mock) {\r\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\r\n    const { email, password } = JSON.parse(data);\r\n\r\n    if (email && password) {\r\n      const user = userTableMock.find(\r\n        (x) =>\r\n          x.email.toLowerCase() === email.toLowerCase() &&\r\n          x.password === password\r\n      );\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\r\n    const { email, fullname, username, password } = JSON.parse(data);\r\n\r\n    if (email && fullname && username && password) {\r\n      const user = {\r\n        id: generateUserId(),\r\n        email,\r\n        fullname,\r\n        username,\r\n        password,\r\n        firstname: fullname,\r\n        lastname: \"Stark\",\r\n        roles: [2], // Manager\r\n        authToken: \"auth-token-\" + Math.random(),\r\n        refreshToken: \"auth-token-\" + Math.random(),\r\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\",\r\n      };\r\n\r\n      userTableMock.push(user);\r\n\r\n      return [200, { ...user, password: undefined }];\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\r\n    const { email } = JSON.parse(data);\r\n\r\n    if (email) {\r\n      const user = userTableMock.find(\r\n        (x) => x.email.toLowerCase() === email.toLowerCase()\r\n      );\r\n\r\n      if (user) {\r\n        user.password = undefined;\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\r\n    const authToken =\r\n      Authorization &&\r\n      Authorization.startsWith(\"Bearer \") &&\r\n      Authorization.slice(\"Bearer \".length);\r\n\r\n    if (authToken) {\r\n      const user = userTableMock.find((x) => x.authToken === authToken);\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [401];\r\n  });\r\n\r\n  function generateUserId() {\r\n    const ids = userTableMock.map((el) => el.id);\r\n    const maxId = Math.max(...ids);\r\n    return maxId + 1;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}