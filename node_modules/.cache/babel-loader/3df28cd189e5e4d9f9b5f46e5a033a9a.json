{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialRemarksState = {\n  listLoading: false,\n  actionsLoading: false,\n  totalCount: 0,\n  entities: null,\n  remarkForEdit: undefined,\n  lastError: null\n};\nexport var callTypes = {\n  list: \"list\",\n  action: \"action\"\n};\nexport var remarksSlice = createSlice({\n  name: \"remarks\",\n  initialState: initialRemarksState,\n  reducers: {\n    catchError: function catchError(state, action) {\n      state.error = \"\".concat(action.type, \": \").concat(action.payload.error);\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = false;\n      } else {\n        state.actionsLoading = false;\n      }\n    },\n    startCall: function startCall(state, action) {\n      state.error = null;\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = true;\n      } else {\n        state.actionsLoading = true;\n      }\n    },\n    // getRemarkById\n    remarkFetched: function remarkFetched(state, action) {\n      state.actionsLoading = false;\n      state.remarkForEdit = action.payload.remarkForEdit;\n      state.error = null;\n    },\n    // findRemarks\n    remarksFetched: function remarksFetched(state, action) {\n      var _action$payload = action.payload,\n        totalCount = _action$payload.totalCount,\n        entities = _action$payload.entities;\n      state.listLoading = false;\n      state.error = null;\n      state.entities = entities;\n      state.totalCount = totalCount;\n    },\n    // createRemark\n    remarkCreated: function remarkCreated(state, action) {\n      state.actionsLoading = false;\n      state.error = null;\n      state.entities.push(action.payload.remark);\n    },\n    // updateRemark\n    remarkUpdated: function remarkUpdated(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.map(function (entity) {\n        if (entity.id === action.payload.remark.id) {\n          return action.payload.remark;\n        }\n        return entity;\n      });\n    },\n    // deleteRemark\n    remarkDeleted: function remarkDeleted(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(function (el) {\n        return el.id !== action.payload.id;\n      });\n    },\n    // deleteRemarks\n    remarksDeleted: function remarksDeleted(state, action) {\n      state.error = null;\n      state.actionsLoading = false;\n      state.entities = state.entities.filter(function (el) {\n        return !action.payload.ids.includes(el.id);\n      });\n    },\n    // remarksUpdateState\n    remarksStatusUpdated: function remarksStatusUpdated(state, action) {\n      state.actionsLoading = false;\n      state.error = null;\n      var _action$payload2 = action.payload,\n        ids = _action$payload2.ids,\n        status = _action$payload2.status;\n      state.entities = state.entities.map(function (entity) {\n        if (ids.findIndex(function (id) {\n          return id === entity.id;\n        }) > -1) {\n          entity.status = status;\n        }\n        return entity;\n      });\n    }\n  }\n});","map":{"version":3,"names":["createSlice","initialRemarksState","listLoading","actionsLoading","totalCount","entities","remarkForEdit","undefined","lastError","callTypes","list","action","remarksSlice","name","initialState","reducers","catchError","state","error","concat","type","payload","callType","startCall","remarkFetched","remarksFetched","_action$payload","remarkCreated","push","remark","remarkUpdated","map","entity","id","remarkDeleted","filter","el","remarksDeleted","ids","includes","remarksStatusUpdated","_action$payload2","status","findIndex"],"sources":["D:/Metronic 7.2.9/theme/react/OnlineShop/src/app/modules/ECommerce/_redux/remarks/remarksSlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialRemarksState = {\r\n  listLoading: false,\r\n  actionsLoading: false,\r\n  totalCount: 0,\r\n  entities: null,\r\n  remarkForEdit: undefined,\r\n  lastError: null\r\n};\r\nexport const callTypes = {\r\n  list: \"list\",\r\n  action: \"action\"\r\n};\r\n\r\nexport const remarksSlice = createSlice({\r\n  name: \"remarks\",\r\n  initialState: initialRemarksState,\r\n  reducers: {\r\n    catchError: (state, action) => {\r\n      state.error = `${action.type}: ${action.payload.error}`;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = false;\r\n      } else {\r\n        state.actionsLoading = false;\r\n      }\r\n    },\r\n    startCall: (state, action) => {\r\n      state.error = null;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = true;\r\n      } else {\r\n        state.actionsLoading = true;\r\n      }\r\n    },\r\n    // getRemarkById\r\n    remarkFetched: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.remarkForEdit = action.payload.remarkForEdit;\r\n      state.error = null;\r\n    },\r\n    // findRemarks\r\n    remarksFetched: (state, action) => {\r\n      const { totalCount, entities } = action.payload;\r\n      state.listLoading = false;\r\n      state.error = null;\r\n      state.entities = entities;\r\n      state.totalCount = totalCount;\r\n    },\r\n    // createRemark\r\n    remarkCreated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.error = null;\r\n      state.entities.push(action.payload.remark);\r\n    },\r\n    // updateRemark\r\n    remarkUpdated: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.map(entity => {\r\n        if (entity.id === action.payload.remark.id) {\r\n          return action.payload.remark;\r\n        }\r\n        return entity;\r\n      });\r\n    },\r\n    // deleteRemark\r\n    remarkDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(el => el.id !== action.payload.id);\r\n    },\r\n    // deleteRemarks\r\n    remarksDeleted: (state, action) => {\r\n      state.error = null;\r\n      state.actionsLoading = false;\r\n      state.entities = state.entities.filter(\r\n        el => !action.payload.ids.includes(el.id)\r\n      );\r\n    },\r\n    // remarksUpdateState\r\n    remarksStatusUpdated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.error = null;\r\n      const { ids, status } = action.payload;\r\n      state.entities = state.entities.map(entity => {\r\n        if (ids.findIndex(id => id === entity.id) > -1) {\r\n          entity.status = status;\r\n        }\r\n        return entity;\r\n      });\r\n    }\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}