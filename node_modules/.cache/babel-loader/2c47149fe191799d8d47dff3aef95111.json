{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\r\n * @name parseJSON\r\n * @category Common Helpers\r\n * @summary Parse a JSON date string\r\n *\r\n * @description\r\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\r\n * a date in JSON, to a JavaScript `Date` instance.\r\n *\r\n * This is a minimal implementation for converting dates retrieved from a JSON API to\r\n * a `Date` instance which can be used with other functions in the `date-fns` library.\r\n * The following formats are supported:\r\n *\r\n *     - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\r\n *     - `2000-03-15T05:20:10Z`: Without milliseconds\r\n *     - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\r\n *     - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\r\n *     - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\r\n *     - `2000-03-15T05:20:10.134566`: Up to 6 digits in milliseconds field. Only first 3 are taken into account since JS does now allow fractional milliseconds\r\n *\r\n * For convenience and ease of use these other input types are also supported\r\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\r\n *\r\n *     - A `Date` instance will be cloned\r\n *     - A `number` will be treated as a timestamp\r\n *\r\n * Any other input type or invalid date strings will return an `Invalid Date`.\r\n *\r\n * @param {String|Number|Date} argument A fully formed ISO1806 date string to convert\r\n * @returns {Date} the parsed date in the local time zone\r\n * @throws {TypeError} 1 argument required\r\n */\n\nexport default function parseJSON(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,6}))?(?:Z|\\+00:?00)?/);\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n    return new Date(NaN);\n  }\n  return toDate(argument);\n}","map":null,"metadata":{},"sourceType":"module"}