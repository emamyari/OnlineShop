{"ast":null,"code":"import * as requestFromServer from \"./customersCrud\";\nimport { customersSlice, callTypes } from \"./customersSlice\";\nvar actions = customersSlice.actions;\nexport var fetchCustomers = function fetchCustomers(queryParams) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n    return requestFromServer.findCustomers(queryParams).then(function (response) {\n      var _response$data = response.data,\n        totalCount = _response$data.totalCount,\n        entities = _response$data.entities;\n      dispatch(actions.customersFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchCustomer = function fetchCustomer(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.customerFetched({\n        customerForEdit: undefined\n      }));\n    }\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getCustomerById(id).then(function (response) {\n      var customer = response.data;\n      dispatch(actions.customerFetched({\n        customerForEdit: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomer = function deleteCustomer(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomer(id).then(function (response) {\n      dispatch(actions.customerDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createCustomer = function createCustomer(customerForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createCustomer(customerForCreation).then(function (response) {\n      var customer = response.data.customer;\n      dispatch(actions.customerCreated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomer = function updateCustomer(customer) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateCustomer(customer).then(function () {\n      dispatch(actions.customerUpdated({\n        customer: customer\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customer\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateCustomersStatus = function updateCustomersStatus(ids, status) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateStatusForCustomers(ids, status).then(function () {\n      dispatch(actions.customersStatusUpdated({\n        ids: ids,\n        status: status\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update customers status\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteCustomers = function deleteCustomers(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteCustomers(ids).then(function () {\n      dispatch(actions.customersDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete customers\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"names":["requestFromServer","customersSlice","callTypes","actions","fetchCustomers","queryParams","dispatch","startCall","callType","list","findCustomers","then","response","_response$data","data","totalCount","entities","customersFetched","catch","error","clientMessage","catchError","fetchCustomer","id","customerFetched","customerForEdit","undefined","action","getCustomerById","customer","deleteCustomer","customerDeleted","createCustomer","customerForCreation","customerCreated","updateCustomer","customerUpdated","updateCustomersStatus","ids","status","updateStatusForCustomers","customersStatusUpdated","deleteCustomers","customersDeleted"],"sources":["C:/Users/Emamyari/Desktop/metapp/demo2/src/app/modules/ECommerce/_redux/customers/customersActions.js"],"sourcesContent":["import * as requestFromServer from \"./customersCrud\";\r\nimport {customersSlice, callTypes} from \"./customersSlice\";\r\n\r\nconst {actions} = customersSlice;\r\n\r\nexport const fetchCustomers = queryParams => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .findCustomers(queryParams)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.customersFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchCustomer = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.customerFetched({ customerForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getCustomerById(id)\r\n    .then(response => {\r\n      const customer = response.data;\r\n      dispatch(actions.customerFetched({ customerForEdit: customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomer = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomer(id)\r\n    .then(response => {\r\n      dispatch(actions.customerDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createCustomer = customerForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createCustomer(customerForCreation)\r\n    .then(response => {\r\n      const { customer } = response.data;\r\n      dispatch(actions.customerCreated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomer = customer => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateCustomer(customer)\r\n    .then(() => {\r\n      dispatch(actions.customerUpdated({ customer }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customer\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateCustomersStatus = (ids, status) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForCustomers(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.customersStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update customers status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteCustomers = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteCustomers(ids)\r\n    .then(() => {\r\n      dispatch(actions.customersDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete customers\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}