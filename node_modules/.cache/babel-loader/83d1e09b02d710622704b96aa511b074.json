{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport { isPluralElement, isLiteralElement, isSelectElement } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\r\n * Whether to convert `#` in plural rule options\r\n * to `{var, number}`\r\n * @param el AST Element\r\n * @param pluralStack current plural stack\r\n */\nexport function normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    }\n    // Go down the options and search for # in any literal element\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n      var opt = el.options[id];\n      // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}