{"ast":null,"code":"/*\r\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\r\nCopyrights licensed under the New BSD License.\r\nSee the accompanying LICENSE file for terms.\r\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n  RE_MQ_EXPRESSION = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n  RE_MQ_FEATURE = /^(?:(min|max)-)?(.+)/,\n  RE_LENGTH_UNIT = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n  RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\nfunction matchQuery(mediaQuery, values) {\n  return parseQuery(mediaQuery).some(function (query) {\n    var inverse = query.inverse;\n\n    // Either the parsed or specified `type` is \"all\", or the types must be\n    // equal for a match.\n    var typeMatch = query.type === 'all' || values.type === query.type;\n\n    // Quit early when `type` doesn't match, but take \"not\" into account.\n    if (typeMatch && inverse || !(typeMatch || inverse)) {\n      return false;\n    }\n    var expressionsMatch = query.expressions.every(function (expression) {\n      var feature = expression.feature,\n        modifier = expression.modifier,\n        expValue = expression.value,\n        value = values[feature];\n\n      // Missing or falsy values don't match.\n      if (!value) {\n        return false;\n      }\n      switch (feature) {\n        case 'orientation':\n        case 'scan':\n          return value.toLowerCase() === expValue.toLowerCase();\n        case 'width':\n        case 'height':\n        case 'device-width':\n        case 'device-height':\n          expValue = toPx(expValue);\n          value = toPx(value);\n          break;\n        case 'resolution':\n          expValue = toDpi(expValue);\n          value = toDpi(value);\n          break;\n        case 'aspect-ratio':\n        case 'device-aspect-ratio':\n        case /* Deprecated */'device-pixel-ratio':\n          expValue = toDecimal(expValue);\n          value = toDecimal(value);\n          break;\n        case 'grid':\n        case 'color':\n        case 'color-index':\n        case 'monochrome':\n          expValue = parseInt(expValue, 10) || 1;\n          value = parseInt(value, 10) || 0;\n          break;\n      }\n      switch (modifier) {\n        case 'min':\n          return value >= expValue;\n        case 'max':\n          return value <= expValue;\n        default:\n          return value === expValue;\n      }\n    });\n    return expressionsMatch && !inverse || !expressionsMatch && inverse;\n  });\n}\nfunction parseQuery(mediaQuery) {\n  return mediaQuery.split(',').map(function (query) {\n    query = query.trim();\n    var captures = query.match(RE_MEDIA_QUERY),\n      modifier = captures[1],\n      type = captures[2],\n      expressions = captures[3] || '',\n      parsed = {};\n    parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n    parsed.type = type ? type.toLowerCase() : 'all';\n\n    // Split expressions into a list.\n    expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n    parsed.expressions = expressions.map(function (expression) {\n      var captures = expression.match(RE_MQ_EXPRESSION),\n        feature = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n      return {\n        modifier: feature[1],\n        feature: feature[2],\n        value: captures[2]\n      };\n    });\n    return parsed;\n  });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n  var decimal = Number(ratio),\n    numbers;\n  if (!decimal) {\n    numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n    decimal = numbers[1] / numbers[2];\n  }\n  return decimal;\n}\nfunction toDpi(resolution) {\n  var value = parseFloat(resolution),\n    units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n  switch (units) {\n    case 'dpcm':\n      return value / 2.54;\n    case 'dppx':\n      return value * 96;\n    default:\n      return value;\n  }\n}\nfunction toPx(length) {\n  var value = parseFloat(length),\n    units = String(length).match(RE_LENGTH_UNIT)[1];\n  switch (units) {\n    case 'em':\n      return value * 16;\n    case 'rem':\n      return value * 16;\n    case 'cm':\n      return value * 96 / 2.54;\n    case 'mm':\n      return value * 96 / 2.54 / 10;\n    case 'in':\n      return value * 96;\n    case 'pt':\n      return value * 72;\n    case 'pc':\n      return value * 72 / 12;\n    default:\n      return value;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}