{"ast":null,"code":"var _jsxFileName = \"H:\\\\OnlineShop\\\\src\\\\app\\\\modules\\\\ECommerce\\\\pages\\\\customers\\\\customers-table\\\\CustomersTable.js\";\n// React bootstrap table next =>\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\nimport React, { useEffect, useMemo } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, { PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../../_redux/customers/customersActions\";\nimport { getSelectRow, getHandlerTableChange, NoRecordsFoundMessage, PleaseWaitMessage, sortCaret, headerSortingClasses } from \"../../../../../../_metronic/_helpers\";\nimport * as uiHelpers from \"../CustomersUIHelpers\";\nimport * as columnFormatters from \"./column-formatters\";\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\nexport function CustomersTable() {\n  var _this = this;\n  // Customers UI Context\n  var customersUIContext = useCustomersUIContext();\n  var customersUIProps = useMemo(function () {\n    return {\n      ids: customersUIContext.ids,\n      setIds: customersUIContext.setIds,\n      queryParams: customersUIContext.queryParams,\n      setQueryParams: customersUIContext.setQueryParams,\n      openEditCustomerDialog: customersUIContext.openEditCustomerDialog,\n      openDeleteCustomerDialog: customersUIContext.openDeleteCustomerDialog\n    };\n  }, [customersUIContext]);\n\n  // Getting curret state of customers list from store (Redux)\n  var _useSelector = useSelector(function (state) {\n      return {\n        currentState: state.customers\n      };\n    }, shallowEqual),\n    currentState = _useSelector.currentState;\n  var totalCount = currentState.totalCount,\n    entities = currentState.entities,\n    listLoading = currentState.listLoading;\n\n  // Customers Redux state\n  var dispatch = useDispatch();\n  useEffect(function () {\n    // clear selections list\n    customersUIProps.setIds([]);\n    // server call by queryParams\n    dispatch(actions.fetchCustomers(customersUIProps.queryParams));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customersUIProps.queryParams, dispatch]);\n  // Table columns\n  var columns = [{\n    dataField: \"id\",\n    text: \"ID\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"firstName\",\n    text: \"Firstname\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"lastName\",\n    text: \"Lastname\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"email\",\n    text: \"Email\",\n    sort: true,\n    sortCaret: sortCaret,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"gender\",\n    text: \"Gender\",\n    sort: false,\n    sortCaret: sortCaret\n  }, {\n    dataField: \"status\",\n    text: \"Status\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.StatusColumnFormatter,\n    headerSortingClasses: headerSortingClasses\n  }, {\n    dataField: \"type\",\n    text: \"Type\",\n    sort: true,\n    sortCaret: sortCaret,\n    formatter: columnFormatters.TypeColumnFormatter\n  }, {\n    dataField: \"action\",\n    text: \"Actions\",\n    formatter: columnFormatters.ActionsColumnFormatter,\n    formatExtraData: {\n      openEditCustomerDialog: customersUIProps.openEditCustomerDialog,\n      openDeleteCustomerDialog: customersUIProps.openDeleteCustomerDialog\n    },\n    classes: \"text-right pr-0\",\n    headerClasses: \"text-right pr-3\",\n    style: {\n      minWidth: \"100px\"\n    }\n  }];\n  // Table pagination properties\n  var paginationOptions = {\n    custom: true,\n    totalSize: totalCount,\n    sizePerPageList: uiHelpers.sizePerPageList,\n    sizePerPage: customersUIProps.queryParams.pageSize,\n    page: customersUIProps.queryParams.pageNumber\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PaginationProvider, {\n    pagination: paginationFactory(paginationOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var paginationProps = _ref.paginationProps,\n      paginationTableProps = _ref.paginationTableProps;\n    return /*#__PURE__*/React.createElement(Pagination, {\n      isLoading: listLoading,\n      paginationProps: paginationProps,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({\n      wrapperClasses: \"table-responsive\",\n      bordered: false,\n      classes: \"table table-head-custom table-vertical-center overflow-hidden\",\n      bootstrap4: true,\n      remote: true,\n      keyField: \"id\",\n      data: entities === null ? [] : entities,\n      columns: columns,\n      defaultSorted: uiHelpers.defaultSorted,\n      onTableChange: getHandlerTableChange(customersUIProps.setQueryParams),\n      selectRow: getSelectRow({\n        entities: entities,\n        ids: customersUIProps.ids,\n        setIds: customersUIProps.setIds\n      })\n    }, paginationTableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(PleaseWaitMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NoRecordsFoundMessage, {\n      entities: entities,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    })));\n  }));\n}","map":{"version":3,"names":["React","useEffect","useMemo","BootstrapTable","paginationFactory","PaginationProvider","shallowEqual","useDispatch","useSelector","actions","getSelectRow","getHandlerTableChange","NoRecordsFoundMessage","PleaseWaitMessage","sortCaret","headerSortingClasses","uiHelpers","columnFormatters","Pagination","useCustomersUIContext","CustomersTable","_this","customersUIContext","customersUIProps","ids","setIds","queryParams","setQueryParams","openEditCustomerDialog","openDeleteCustomerDialog","_useSelector","state","currentState","customers","totalCount","entities","listLoading","dispatch","fetchCustomers","columns","dataField","text","sort","formatter","StatusColumnFormatter","TypeColumnFormatter","ActionsColumnFormatter","formatExtraData","classes","headerClasses","style","minWidth","paginationOptions","custom","totalSize","sizePerPageList","sizePerPage","pageSize","page","pageNumber","createElement","Fragment","pagination","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_ref","paginationProps","paginationTableProps","isLoading","Object","assign","wrapperClasses","bordered","bootstrap4","remote","keyField","data","defaultSorted","onTableChange","selectRow"],"sources":["H:/OnlineShop/src/app/modules/ECommerce/pages/customers/customers-table/CustomersTable.js"],"sourcesContent":["// React bootstrap table next =>\r\n// DOCS: https://react-bootstrap-table.github.io/react-bootstrap-table2/docs/\r\n// STORYBOOK: https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory, {\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../../../_redux/customers/customersActions\";\r\nimport {\r\n  getSelectRow,\r\n  getHandlerTableChange,\r\n  NoRecordsFoundMessage,\r\n  PleaseWaitMessage,\r\n  sortCaret,\r\n  headerSortingClasses,\r\n} from \"../../../../../../_metronic/_helpers\";\r\nimport * as uiHelpers from \"../CustomersUIHelpers\";\r\nimport * as columnFormatters from \"./column-formatters\";\r\nimport { Pagination } from \"../../../../../../_metronic/_partials/controls\";\r\nimport { useCustomersUIContext } from \"../CustomersUIContext\";\r\n\r\nexport function CustomersTable() {\r\n  // Customers UI Context\r\n  const customersUIContext = useCustomersUIContext();\r\n  const customersUIProps = useMemo(() => {\r\n    return {\r\n      ids: customersUIContext.ids,\r\n      setIds: customersUIContext.setIds,\r\n      queryParams: customersUIContext.queryParams,\r\n      setQueryParams: customersUIContext.setQueryParams,\r\n      openEditCustomerDialog: customersUIContext.openEditCustomerDialog,\r\n      openDeleteCustomerDialog: customersUIContext.openDeleteCustomerDialog,\r\n    };\r\n  }, [customersUIContext]);\r\n\r\n  // Getting curret state of customers list from store (Redux)\r\n  const { currentState } = useSelector(\r\n    (state) => ({ currentState: state.customers }),\r\n    shallowEqual\r\n  );\r\n  const { totalCount, entities, listLoading } = currentState;\r\n\r\n  // Customers Redux state\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // clear selections list\r\n    customersUIProps.setIds([]);\r\n    // server call by queryParams\r\n    dispatch(actions.fetchCustomers(customersUIProps.queryParams));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [customersUIProps.queryParams, dispatch]);\r\n  // Table columns\r\n  const columns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"ID\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      headerSortingClasses,\r\n    },\r\n    {\r\n      dataField: \"firstName\",\r\n      text: \"Firstname\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      headerSortingClasses,\r\n    },\r\n    {\r\n      dataField: \"lastName\",\r\n      text: \"Lastname\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      headerSortingClasses,\r\n    },\r\n    {\r\n      dataField: \"email\",\r\n      text: \"Email\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      headerSortingClasses,\r\n    },\r\n    {\r\n      dataField: \"gender\",\r\n      text: \"Gender\",\r\n      sort: false,\r\n      sortCaret: sortCaret,\r\n    },\r\n    {\r\n      dataField: \"status\",\r\n      text: \"Status\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      formatter: columnFormatters.StatusColumnFormatter,\r\n      headerSortingClasses,\r\n    },\r\n    {\r\n      dataField: \"type\",\r\n      text: \"Type\",\r\n      sort: true,\r\n      sortCaret: sortCaret,\r\n      formatter: columnFormatters.TypeColumnFormatter,\r\n    },\r\n    {\r\n      dataField: \"action\",\r\n      text: \"Actions\",\r\n      formatter: columnFormatters.ActionsColumnFormatter,\r\n      formatExtraData: {\r\n        openEditCustomerDialog: customersUIProps.openEditCustomerDialog,\r\n        openDeleteCustomerDialog: customersUIProps.openDeleteCustomerDialog,\r\n      },\r\n      classes: \"text-right pr-0\",\r\n      headerClasses: \"text-right pr-3\",\r\n      style: {\r\n        minWidth: \"100px\",\r\n      },\r\n    },\r\n  ];\r\n  // Table pagination properties\r\n  const paginationOptions = {\r\n    custom: true,\r\n    totalSize: totalCount,\r\n    sizePerPageList: uiHelpers.sizePerPageList,\r\n    sizePerPage: customersUIProps.queryParams.pageSize,\r\n    page: customersUIProps.queryParams.pageNumber,\r\n  };\r\n  return (\r\n    <>\r\n      <PaginationProvider pagination={paginationFactory(paginationOptions)}>\r\n        {({ paginationProps, paginationTableProps }) => {\r\n          return (\r\n            <Pagination\r\n              isLoading={listLoading}\r\n              paginationProps={paginationProps}\r\n            >\r\n              <BootstrapTable\r\n                wrapperClasses=\"table-responsive\"\r\n                bordered={false}\r\n                classes=\"table table-head-custom table-vertical-center overflow-hidden\"\r\n                bootstrap4\r\n                remote\r\n                keyField=\"id\"\r\n                data={entities === null ? [] : entities}\r\n                columns={columns}\r\n                defaultSorted={uiHelpers.defaultSorted}\r\n                onTableChange={getHandlerTableChange(\r\n                  customersUIProps.setQueryParams\r\n                )}\r\n                selectRow={getSelectRow({\r\n                  entities,\r\n                  ids: customersUIProps.ids,\r\n                  setIds: customersUIProps.setIds,\r\n                })}\r\n                {...paginationTableProps}\r\n              >\r\n                <PleaseWaitMessage entities={entities} />\r\n                <NoRecordsFoundMessage entities={entities} />\r\n              </BootstrapTable>\r\n            </Pagination>\r\n          );\r\n        }}\r\n      </PaginationProvider>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}