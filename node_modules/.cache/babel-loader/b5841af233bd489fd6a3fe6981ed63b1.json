{"ast":null,"code":"import _toConsumableArray from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"H:\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport customerTableMock from \"./customerTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockCustomer(mock) {\n  mock.onPost(\"api/customers\").reply(function (_ref) {\n    var data = _ref.data;\n    var _JSON$parse = JSON.parse(data),\n      customer = _JSON$parse.customer;\n    var _customer$firstName = customer.firstName,\n      firstName = _customer$firstName === void 0 ? \"\" : _customer$firstName,\n      _customer$lastName = customer.lastName,\n      lastName = _customer$lastName === void 0 ? \"\" : _customer$lastName,\n      _customer$email = customer.email,\n      email = _customer$email === void 0 ? \"\" : _customer$email,\n      _customer$userName = customer.userName,\n      userName = _customer$userName === void 0 ? \"\" : _customer$userName,\n      _customer$gender = customer.gender,\n      gender = _customer$gender === void 0 ? \"Female\" : _customer$gender,\n      _customer$status = customer.status,\n      status = _customer$status === void 0 ? 0 : _customer$status,\n      _customer$dateOfBbirt = customer.dateOfBbirth,\n      dateOfBbirth = _customer$dateOfBbirt === void 0 ? \"01/01/2019\" : _customer$dateOfBbirt,\n      _customer$ipAddress = customer.ipAddress,\n      ipAddress = _customer$ipAddress === void 0 ? \"127.0.0.1\" : _customer$ipAddress,\n      _customer$type = customer.type,\n      type = _customer$type === void 0 ? 1 : _customer$type;\n    var id = generateUserId();\n    var newCustomer = {\n      id: id,\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      userName: userName,\n      gender: gender,\n      status: status,\n      dateOfBbirth: dateOfBbirth,\n      ipAddress: ipAddress,\n      type: type\n    };\n    customerTableMock.push(newCustomer);\n    return [200, {\n      customer: newCustomer\n    }];\n  });\n  mock.onPost(\"api/customers/find\").reply(function (config) {\n    var mockUtils = new MockUtils();\n    var _JSON$parse2 = JSON.parse(config.data),\n      queryParams = _JSON$parse2.queryParams;\n    var filterdCustomers = mockUtils.baseFilter(customerTableMock, queryParams);\n    return [200, filterdCustomers];\n  });\n  mock.onPost(\"api/customers/deleteCustomers\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n      ids = _JSON$parse3.ids;\n    ids.forEach(function (id) {\n      var index = customerTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n      if (index > -1) {\n        customerTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(function (config) {\n    var _JSON$parse4 = JSON.parse(config.data),\n      ids = _JSON$parse4.ids,\n      status = _JSON$parse4.status;\n    customerTableMock.forEach(function (el) {\n      if (ids.findIndex(function (id) {\n        return id === el.id;\n      }) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var customer = customerTableMock.find(function (el) {\n      return el.id === +id;\n    });\n    if (!customer) {\n      return [400];\n    }\n    return [200, customer];\n  });\n  mock.onPut(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var _JSON$parse5 = JSON.parse(config.data),\n      customer = _JSON$parse5.customer;\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    if (!index) {\n      return [400];\n    }\n    customerTableMock[index] = _objectSpread({}, customer);\n    return [200];\n  });\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\n    var index = customerTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    customerTableMock.splice(index, 1);\n    if (!index === -1) {\n      return [400];\n    }\n    return [200];\n  });\n}\nfunction generateUserId() {\n  var ids = customerTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}","map":{"version":3,"names":["customerTableMock","MockUtils","mockCustomer","mock","onPost","reply","_ref","data","_JSON$parse","JSON","parse","customer","_customer$firstName","firstName","_customer$lastName","lastName","_customer$email","email","_customer$userName","userName","_customer$gender","gender","_customer$status","status","_customer$dateOfBbirt","dateOfBbirth","_customer$ipAddress","ipAddress","_customer$type","type","id","generateUserId","newCustomer","push","config","mockUtils","_JSON$parse2","queryParams","filterdCustomers","baseFilter","_JSON$parse3","ids","forEach","index","findIndex","el","splice","_JSON$parse4","onGet","url","match","find","onPut","_JSON$parse5","_objectSpread","onDelete","map","maxId","Math","max","apply","_toConsumableArray"],"sources":["H:/OnlineShop/src/app/modules/ECommerce/__mocks__/mockCustomer.js"],"sourcesContent":["import customerTableMock from \"./customerTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockCustomer(mock) {\r\n  mock.onPost(\"api/customers\").reply(({ data }) => {\r\n    const { customer } = JSON.parse(data);\r\n    const {\r\n      firstName = \"\",\r\n      lastName = \"\",\r\n      email = \"\",\r\n      userName = \"\",\r\n      gender = \"Female\",\r\n      status = 0,\r\n      dateOfBbirth = \"01/01/2019\",\r\n      ipAddress = \"127.0.0.1\",\r\n      type = 1\r\n    } = customer;\r\n\r\n    const id = generateUserId();\r\n    const newCustomer = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      userName,\r\n      gender,\r\n      status,\r\n      dateOfBbirth,\r\n      ipAddress,\r\n      type\r\n    };\r\n    customerTableMock.push(newCustomer);\r\n    return [200, { customer: newCustomer }];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/find\").reply(config => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filterdCustomers = mockUtils.baseFilter(\r\n      customerTableMock,\r\n      queryParams\r\n    );\r\n    return [200, filterdCustomers];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/deleteCustomers\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = customerTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        customerTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/customers/updateStatusForCustomers\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    customerTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const customer = customerTableMock.find(el => el.id === +id);\r\n    if (!customer) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, customer];\r\n  });\r\n\r\n  mock.onPut(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const { customer } = JSON.parse(config.data);\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    customerTableMock[index] = { ...customer };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/customers\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/customers\\/(\\d+)/)[1];\r\n    const index = customerTableMock.findIndex(el => el.id === +id);\r\n    customerTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateUserId() {\r\n  const ids = customerTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}