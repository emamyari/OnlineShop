{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar exenv_1 = require(\"exenv\");\nexports.canUseDOM = function () {\n  return exenv_1.canUseDOM;\n};\nexports.supportsInlineSVG = function () {\n  /* istanbul ignore next */\n  if (!document) {\n    return false;\n  }\n  var div = document.createElement('div');\n  div.innerHTML = '<svg />';\n  return div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';\n};\n// tslint:disable-next-line:no-shadowed-variable\nvar InlineSVGError = /** @class */function (_super) {\n  __extends(InlineSVGError, _super);\n  function InlineSVGError(message, data) {\n    var _this = _super.call(this) || this;\n    _this.name = 'InlineSVGError';\n    _this.message = message;\n    _this.data = data;\n    return _this;\n  }\n  return InlineSVGError;\n}(Error);\nexports.InlineSVGError = InlineSVGError;\nexports.isSupportedEnvironment = function () {\n  return exports.supportsInlineSVG() && typeof window !== 'undefined' && window !== null;\n};\nexports.randomString = function (length) {\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n  var numbers = '1234567890';\n  var charset = \"\" + letters + letters.toUpperCase() + numbers;\n  var randomCharacter = function randomCharacter(character) {\n    return character[Math.floor(Math.random() * character.length)];\n  };\n  var R = '';\n  for (var i = 0; i < length; i++) {\n    R += randomCharacter(charset);\n  }\n  return R;\n};","map":null,"metadata":{},"sourceType":"script"}