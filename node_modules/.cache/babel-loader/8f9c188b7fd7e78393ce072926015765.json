{"ast":null,"code":"import _classCallCheck from \"D:\\\\Metronic 7.2.9\\\\theme\\\\react\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Metronic 7.2.9\\\\theme\\\\react\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Metronic 7.2.9\\\\theme\\\\react\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Metronic 7.2.9\\\\theme\\\\react\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\n/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nvar invariant = invariant_.default || invariant_;\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n  if (absValue < DAY) {\n    return 'hour';\n  }\n  return 'day';\n}\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n    case 'minute':\n      return MINUTE;\n    case 'hour':\n      return HOUR;\n    default:\n      return DAY;\n  }\n}\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n  switch (unit) {\n    case 'second':\n      return value;\n    case 'minute':\n      return value * MINUTE;\n    default:\n      return value * HOUR;\n  }\n}\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement() {\n  var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'second';\n  return INCREMENTABLE_UNITS.includes(unit);\n}\nfunction verifyProps(updateIntervalInSeconds, unit) {\n  invariant(!updateIntervalInSeconds || updateIntervalInSeconds && canIncrement(unit), 'Cannot schedule update with unit longer than hour');\n}\nexport var FormattedRelativeTime = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(FormattedRelativeTime, _React$PureComponent);\n  var _super = _createSuper(FormattedRelativeTime);\n  function FormattedRelativeTime(props) {\n    var _this;\n    _classCallCheck(this, FormattedRelativeTime);\n    _this = _super.call(this, props);\n    // Public for testing\n    _this._updateTimer = null;\n    _this.state = {\n      prevUnit: _this.props.unit,\n      prevValue: _this.props.value,\n      currentValueInSeconds: canIncrement(_this.props.unit) ? valueToSeconds(_this.props.value, _this.props.unit) : 0\n    };\n    verifyProps(props.updateIntervalInSeconds, props.unit);\n    return _this;\n  }\n  _createClass(FormattedRelativeTime, [{\n    key: \"scheduleNextUpdate\",\n    value: function scheduleNextUpdate(_ref, _ref2) {\n      var _this2 = this;\n      var updateIntervalInSeconds = _ref.updateIntervalInSeconds,\n        unit = _ref.unit;\n      var currentValueInSeconds = _ref2.currentValueInSeconds;\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n      // If there's no interval and we cannot increment this unit, do nothing\n      if (!updateIntervalInSeconds || !canIncrement(unit)) {\n        return;\n      }\n      // Figure out the next interesting time\n      var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n      var nextUnit = selectUnit(nextValueInSeconds);\n      // We've reached the max auto incrementable unit, don't schedule another update\n      if (nextUnit === 'day') {\n        return;\n      }\n      var unitDuration = getDurationInSeconds(nextUnit);\n      var remainder = nextValueInSeconds % unitDuration;\n      var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n      var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n      var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n      this._updateTimer = setTimeout(function () {\n        return _this2.setState({\n          currentValueInSeconds: nextInterestingValueInSeconds\n        });\n      }, delayInSeconds * 1e3);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      return React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var formatRelativeTime = intl.formatRelativeTime,\n          Text = intl.textComponent;\n        var _this3$props = _this3.props,\n          children = _this3$props.children,\n          value = _this3$props.value,\n          unit = _this3$props.unit,\n          updateIntervalInSeconds = _this3$props.updateIntervalInSeconds;\n        var currentValueInSeconds = _this3.state.currentValueInSeconds;\n        var currentValue = value || 0;\n        var currentUnit = unit;\n        if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n          currentUnit = selectUnit(currentValueInSeconds);\n          var unitDuration = getDurationInSeconds(currentUnit);\n          currentValue = Math.round(currentValueInSeconds / unitDuration);\n        }\n        var formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, _this3.props));\n        if (typeof children === 'function') {\n          return children(formattedRelativeTime);\n        }\n        if (Text) {\n          return React.createElement(Text, null, formattedRelativeTime);\n        }\n        return formattedRelativeTime;\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n        return {\n          prevValue: props.value,\n          prevUnit: props.unit,\n          currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n        };\n      }\n      return null;\n    }\n  }]);\n  return FormattedRelativeTime;\n}(React.PureComponent);\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":null,"metadata":{},"sourceType":"module"}