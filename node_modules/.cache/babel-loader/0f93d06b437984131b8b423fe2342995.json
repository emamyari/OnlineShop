{"ast":null,"code":"var _jsxFileName = \"H:\\\\OnlineShop\\\\src\\\\app\\\\pages\\\\login.js\";\n// Form is based on Formik\n// Data validation is based on Yup\n// Please, be familiar with article first:\n// https://hackernoon.com/react-form-validation-with-formik-and-yup-8b76bda62e10\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Input, Select, DatePickerField } from \"../../_metronic/_partials/controls\";\n\n// Validation schema\nvar CustomerEditSchema = Yup.object().shape({\n  firstName: Yup.string().min(3, \"Minimum 3 symbols\").max(50, \"Maximum 50 symbols\").required(\"Firstname is required\"),\n  lastName: Yup.string().min(3, \"Minimum 3 symbols\").max(50, \"Maximum 50 symbols\").required(\"Lastname is required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  userName: Yup.string().required(\"Username is required\"),\n  dateOfBbirth: Yup.mixed().nullable(false).required(\"Date of Birth is required\"),\n  ipAddress: Yup.string().required(\"IP Address is required\")\n});\nexport function Login(_ref) {\n  var _this = this;\n  var saveCustomer = _ref.saveCustomer,\n    customer = _ref.customer,\n    actionsLoading = _ref.actionsLoading,\n    onHide = _ref.onHide;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: customer,\n    validationSchema: CustomerEditSchema,\n    onSubmit: function onSubmit(values) {\n      saveCustomer(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: onHide,\n      className: \"btn btn-light btn-elevate\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(React.Fragment, null, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: function onClick() {\n        return handleSubmit();\n      },\n      className: \"btn btn-primary btn-elevate\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, \"Save\")));\n  }));\n}","map":{"version":3,"names":["React","Modal","Formik","Form","Field","Yup","Input","Select","DatePickerField","CustomerEditSchema","object","shape","firstName","string","min","max","required","lastName","email","userName","dateOfBbirth","mixed","nullable","ipAddress","Login","_ref","_this","saveCustomer","customer","actionsLoading","onHide","createElement","Fragment","enableReinitialize","initialValues","validationSchema","onSubmit","values","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_ref2","handleSubmit","Footer","type","onClick","className"],"sources":["H:/OnlineShop/src/app/pages/login.js"],"sourcesContent":["// Form is based on Formik\r\n// Data validation is based on Yup\r\n// Please, be familiar with article first:\r\n// https://hackernoon.com/react-form-validation-with-formik-and-yup-8b76bda62e10\r\nimport React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Input,\r\n  Select,\r\n  DatePickerField,\r\n} from \"../../_metronic/_partials/controls\";\r\n\r\n// Validation schema\r\nconst CustomerEditSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .min(3, \"Minimum 3 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Firstname is required\"),\r\n  lastName: Yup.string()\r\n    .min(3, \"Minimum 3 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Lastname is required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Email is required\"),\r\n  userName: Yup.string().required(\"Username is required\"),\r\n  dateOfBbirth: Yup.mixed()\r\n    .nullable(false)\r\n    .required(\"Date of Birth is required\"),\r\n  ipAddress: Yup.string().required(\"IP Address is required\"),\r\n});\r\n\r\nexport function Login({\r\n  saveCustomer,\r\n  customer,\r\n  actionsLoading,\r\n  onHide,\r\n}) {\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={customer}\r\n        validationSchema={CustomerEditSchema}\r\n        onSubmit={(values) => {\r\n          saveCustomer(values);\r\n        }}\r\n      >\r\n        {({ handleSubmit }) => (\r\n          <>\r\n          \r\n            <Modal.Footer>\r\n              <button\r\n                type=\"button\"\r\n                onClick={onHide}\r\n                className=\"btn btn-light btn-elevate\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <> </>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                className=\"btn btn-primary btn-elevate\"\r\n              >\r\n                Save\r\n              </button>\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}