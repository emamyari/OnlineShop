{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Saeed\\\\Desktop\\\\onlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Saeed\\\\Desktop\\\\onlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport specificationTableMock from \"./specificationTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockSpecifications(mock) {\n  mock.onPost(\"api/specifications\").reply(function (_ref) {\n    var data = _ref.data;\n    var _JSON$parse = JSON.parse(data),\n      specification = _JSON$parse.specification;\n    var carId = specification.carId,\n      _specification$value = specification.value,\n      value = _specification$value === void 0 ? \"\" : _specification$value,\n      specId = specification.specId;\n    var id = generateSpecificationId();\n    var newSpecification = {\n      id: id,\n      carId: +carId,\n      value: value,\n      specId: +specId\n    };\n    specificationTableMock.push(newSpecification);\n    return [200, {\n      specification: newSpecification\n    }];\n  });\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(function (config) {\n    var urls = config.url.split(\"/\");\n    var id = urls[2];\n    var mockUtils = new MockUtils();\n    var _JSON$parse2 = JSON.parse(config.data),\n      queryParams = _JSON$parse2.queryParams;\n    var specifications = specificationTableMock.filter(function (el) {\n      return el.carId === +id;\n    });\n    var result = [];\n    specifications.forEach(function (el) {\n      return result.push(wrapSpecification(el));\n    });\n    var filterdSpecifications = mockUtils.baseFilter(result, queryParams);\n    return [200, filterdSpecifications];\n  });\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(function (config) {\n    var _JSON$parse3 = JSON.parse(config.data),\n      ids = _JSON$parse3.ids;\n    ids.forEach(function (id) {\n      var index = specificationTableMock.findIndex(function (el) {\n        return el.id === id;\n      });\n      if (index > -1) {\n        specificationTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var spec = specificationTableMock.find(function (el) {\n      return el.id === +id;\n    });\n    if (!spec) {\n      return [400];\n    }\n    var specification = wrapSpecification(spec);\n    return [200, specification];\n  });\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var _JSON$parse4 = JSON.parse(config.data),\n      specification = _JSON$parse4.specification;\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    if (!index) {\n      return [400];\n    }\n    specificationTableMock[index] = _objectSpread({}, specification);\n    return [200];\n  });\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(function (config) {\n    var id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    var index = specificationTableMock.findIndex(function (el) {\n      return el.id === +id;\n    });\n    specificationTableMock.splice(index, 1);\n    if (!index === -1) {\n      return [400];\n    }\n    return [200];\n  });\n}\nfunction generateSpecificationId() {\n  var ids = specificationTableMock.map(function (el) {\n    return el.id;\n  });\n  var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n  return maxId + 1;\n}\nfunction wrapSpecification(specification) {\n  var newSpec = _objectSpread({}, specification);\n  newSpec.name = getSpecNameById(newSpec.specId);\n  return newSpec;\n}\nfunction getSpecNameById(specId) {\n  var specs = [\"Seats\", \"Fuel Type\", \"Stock\", \"Door count\", \"Engine\", \"Transmission\", \"Drivetrain\", \"Combined MPG\", \"Warranty\", \"Wheels\"];\n  return specs[specId];\n}","map":{"version":3,"names":["specificationTableMock","MockUtils","mockSpecifications","mock","onPost","reply","_ref","data","_JSON$parse","JSON","parse","specification","carId","_specification$value","value","specId","id","generateSpecificationId","newSpecification","push","config","urls","url","split","mockUtils","_JSON$parse2","queryParams","specifications","filter","el","result","forEach","wrapSpecification","filterdSpecifications","baseFilter","_JSON$parse3","ids","index","findIndex","splice","onGet","match","spec","find","onPut","_JSON$parse4","_objectSpread","onDelete","map","maxId","Math","max","apply","_toConsumableArray","newSpec","name","getSpecNameById","specs"],"sources":["C:/Users/Saeed/Desktop/onlineShop/src/app/modules/ECommerce/__mocks__/mockSpecification.js"],"sourcesContent":["import specificationTableMock from \"./specificationTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockSpecifications(mock) {\r\n  mock.onPost(\"api/specifications\").reply(({ data }) => {\r\n    const { specification } = JSON.parse(data);\r\n    const { carId, value = \"\", specId } = specification;\r\n    const id = generateSpecificationId();\r\n    const newSpecification = {\r\n      id,\r\n      carId: +carId,\r\n      value,\r\n      specId: +specId\r\n    };\r\n    specificationTableMock.push(newSpecification);\r\n    return [200, { specification: newSpecification }];\r\n  });\r\n\r\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(config => {\r\n    const urls = config.url.split(\"/\");\r\n    const id = urls[2];\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const specifications = specificationTableMock.filter(\r\n      el => el.carId === +id\r\n    );\r\n    const result = [];\r\n    specifications.forEach(el => result.push(wrapSpecification(el)));\r\n    const filterdSpecifications = mockUtils.baseFilter(result, queryParams);\r\n\r\n    return [200, filterdSpecifications];\r\n  });\r\n\r\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = specificationTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        specificationTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const spec = specificationTableMock.find(el => el.id === +id);\r\n    if (!spec) {\r\n      return [400];\r\n    }\r\n\r\n    const specification = wrapSpecification(spec);\r\n\r\n    return [200, specification];\r\n  });\r\n\r\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const { specification } = JSON.parse(config.data);\r\n    const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    specificationTableMock[index] = { ...specification };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    specificationTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateSpecificationId() {\r\n  const ids = specificationTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n\r\nfunction wrapSpecification(specification) {\r\n  const newSpec = { ...specification };\r\n  newSpec.name = getSpecNameById(newSpec.specId);\r\n  return newSpec;\r\n}\r\n\r\nfunction getSpecNameById(specId) {\r\n  const specs = [\r\n    \"Seats\",\r\n    \"Fuel Type\",\r\n    \"Stock\",\r\n    \"Door count\",\r\n    \"Engine\",\r\n    \"Transmission\",\r\n    \"Drivetrain\",\r\n    \"Combined MPG\",\r\n    \"Warranty\",\r\n    \"Wheels\"\r\n  ];\r\n  return specs[specId];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}