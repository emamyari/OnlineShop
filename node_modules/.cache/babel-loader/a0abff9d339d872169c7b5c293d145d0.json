{"ast":null,"code":"import * as requestFromServer from \"./remarksCrud\";\nimport { remarksSlice, callTypes } from \"./remarksSlice\";\nvar actions = remarksSlice.actions;\nexport var fetchRemarks = function fetchRemarks(queryParams, productId) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.list\n    }));\n    if (!productId) {\n      return dispatch(actions.remarksFetched({\n        totalCount: 0,\n        entities: null\n      }));\n    }\n    return requestFromServer.findRemarks(queryParams, productId).then(function (response) {\n      var _response$data = response.data,\n        totalCount = _response$data.totalCount,\n        entities = _response$data.entities;\n      dispatch(actions.remarksFetched({\n        totalCount: totalCount,\n        entities: entities\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.list\n      }));\n    });\n  };\n};\nexport var fetchRemark = function fetchRemark(id) {\n  return function (dispatch) {\n    if (!id) {\n      return dispatch(actions.remarkFetched({\n        remarkForEdit: undefined\n      }));\n    }\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.getRemarkById(id).then(function (response) {\n      var remark = response.data;\n      dispatch(actions.remarkFetched({\n        remarkForEdit: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't find remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemark = function deleteRemark(id) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemark(id).then(function (response) {\n      dispatch(actions.remarkDeleted({\n        id: id\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var createRemark = function createRemark(remarkForCreation) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.createRemark(remarkForCreation).then(function (response) {\n      var remark = response.data.remark;\n      dispatch(actions.remarkCreated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't create remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var updateRemark = function updateRemark(remark) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.updateRemark(remark).then(function () {\n      dispatch(actions.remarkUpdated({\n        remark: remark\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't update remark\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};\nexport var deleteRemarks = function deleteRemarks(ids) {\n  return function (dispatch) {\n    dispatch(actions.startCall({\n      callType: callTypes.action\n    }));\n    return requestFromServer.deleteRemarks(ids).then(function () {\n      console.log(\"delete return\");\n      dispatch(actions.remarksDeleted({\n        ids: ids\n      }));\n    }).catch(function (error) {\n      error.clientMessage = \"Can't delete remarks\";\n      dispatch(actions.catchError({\n        error: error,\n        callType: callTypes.action\n      }));\n    });\n  };\n};","map":{"version":3,"names":["requestFromServer","remarksSlice","callTypes","actions","fetchRemarks","queryParams","productId","dispatch","startCall","callType","list","remarksFetched","totalCount","entities","findRemarks","then","response","_response$data","data","catch","error","clientMessage","catchError","fetchRemark","id","remarkFetched","remarkForEdit","undefined","action","getRemarkById","remark","deleteRemark","remarkDeleted","createRemark","remarkForCreation","remarkCreated","updateRemark","remarkUpdated","deleteRemarks","ids","console","log","remarksDeleted"],"sources":["C:/Users/Saeed/Desktop/onlineShop/src/app/modules/ECommerce/_redux/remarks/remarksActions.js"],"sourcesContent":["import * as requestFromServer from \"./remarksCrud\";\r\nimport {remarksSlice, callTypes} from \"./remarksSlice\";\r\n\r\nconst {actions} = remarksSlice;\r\n\r\nexport const fetchRemarks = (queryParams, productId) => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(actions.remarksFetched({ totalCount: 0, entities: null }));\r\n  }\r\n\r\n  return requestFromServer\r\n    .findRemarks(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.remarksFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchRemark = id => dispatch => {\r\n  if (!id) {\r\n    return dispatch(actions.remarkFetched({ remarkForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getRemarkById(id)\r\n    .then(response => {\r\n      const remark = response.data;\r\n      dispatch(actions.remarkFetched({ remarkForEdit: remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemark = id => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemark(id)\r\n    .then(response => {\r\n      dispatch(actions.remarkDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createRemark = remarkForCreation => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createRemark(remarkForCreation)\r\n    .then(response => {\r\n      const { remark } = response.data;\r\n      dispatch(actions.remarkCreated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateRemark = remark => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateRemark(remark)\r\n    .then(() => {\r\n      dispatch(actions.remarkUpdated({ remark }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update remark\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteRemarks = ids => dispatch => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteRemarks(ids)\r\n    .then(() => {\r\n      console.log(\"delete return\");\r\n      dispatch(actions.remarksDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete remarks\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}