{"ast":null,"code":"\"use strict\";\n\nvar axios = require(\"axios\");\nvar isEqual = require(\"fast-deep-equal\");\nvar isBuffer = require(\"is-buffer\");\n\n// < 0.13.0 will not have default headers set on a custom instance\nvar rejectWithError = !!axios.create().defaults.headers;\nfunction find(array, predicate) {\n  var length = array.length;\n  for (var i = 0; i < length; i++) {\n    var value = array[i];\n    if (predicate(value)) return value;\n  }\n}\nfunction isFunction(val) {\n  return toString.call(val) === \"[object Function]\";\n}\nfunction isObjectOrArray(val) {\n  return val !== null && typeof val === \"object\";\n}\nfunction isStream(val) {\n  return isObjectOrArray(val) && isFunction(val.pipe);\n}\nfunction isArrayBuffer(val) {\n  return toString.call(val) === \"[object ArrayBuffer]\";\n}\nfunction combineUrls(baseURL, url) {\n  if (baseURL) {\n    return baseURL.replace(/\\/+$/, \"\") + \"/\" + url.replace(/^\\/+/, \"\");\n  }\n  return url;\n}\nfunction findHandler(handlers, method, url, body, parameters, headers, baseURL) {\n  return find(handlers[method.toLowerCase()], function (handler) {\n    if (typeof handler[0] === \"string\") {\n      return (isUrlMatching(url, handler[0]) || isUrlMatching(combineUrls(baseURL, url), handler[0])) && isBodyOrParametersMatching(method, body, parameters, handler[1]) && isObjectMatching(headers, handler[2]);\n    } else if (handler[0] instanceof RegExp) {\n      return (handler[0].test(url) || handler[0].test(combineUrls(baseURL, url))) && isBodyOrParametersMatching(method, body, parameters, handler[1]) && isObjectMatching(headers, handler[2]);\n    }\n  });\n}\nfunction isUrlMatching(url, required) {\n  var noSlashUrl = url[0] === \"/\" ? url.substr(1) : url;\n  var noSlashRequired = required[0] === \"/\" ? required.substr(1) : required;\n  return noSlashUrl === noSlashRequired;\n}\nfunction isBodyOrParametersMatching(method, body, parameters, required) {\n  var allowedParamsMethods = [\"delete\", \"get\", \"head\", \"options\"];\n  if (allowedParamsMethods.indexOf(method.toLowerCase()) >= 0) {\n    var params = required ? required.params : undefined;\n    return isObjectMatching(parameters, params);\n  } else {\n    return isBodyMatching(body, required);\n  }\n}\nfunction isObjectMatching(actual, expected) {\n  if (expected === undefined) return true;\n  if (typeof expected.asymmetricMatch === \"function\") {\n    return expected.asymmetricMatch(actual);\n  }\n  return isEqual(actual, expected);\n}\nfunction isBodyMatching(body, requiredBody) {\n  if (requiredBody === undefined) {\n    return true;\n  }\n  var parsedBody;\n  try {\n    parsedBody = JSON.parse(body);\n  } catch (e) {}\n  return isObjectMatching(parsedBody ? parsedBody : body, requiredBody);\n}\nfunction purgeIfReplyOnce(mock, handler) {\n  Object.keys(mock.handlers).forEach(function (key) {\n    var index = mock.handlers[key].indexOf(handler);\n    if (index > -1) {\n      mock.handlers[key].splice(index, 1);\n    }\n  });\n}\nfunction settle(resolve, reject, response, delay) {\n  if (delay > 0) {\n    setTimeout(function () {\n      settle(resolve, reject, response);\n    }, delay);\n    return;\n  }\n  if (response.config && response.config.validateStatus) {\n    response.config.validateStatus(response.status) ? resolve(response) : reject(createAxiosError(\"Request failed with status code \" + response.status, response.config, response));\n    return;\n  }\n\n  // Support for axios < 0.11\n  if (response.status >= 200 && response.status < 300) {\n    resolve(response);\n  } else {\n    reject(response);\n  }\n}\nfunction createAxiosError(message, config, response, code) {\n  // Support for axios < 0.13.0\n  if (!rejectWithError) return response;\n  var error = new Error(message);\n  error.isAxiosError = true;\n  error.config = config;\n  if (response !== undefined) {\n    error.response = response;\n  }\n  if (code !== undefined) {\n    error.code = code;\n  }\n  return error;\n}\nmodule.exports = {\n  find: find,\n  findHandler: findHandler,\n  purgeIfReplyOnce: purgeIfReplyOnce,\n  settle: settle,\n  isStream: isStream,\n  isArrayBuffer: isArrayBuffer,\n  isFunction: isFunction,\n  isObjectOrArray: isObjectOrArray,\n  isBuffer: isBuffer,\n  isEqual: isEqual,\n  createAxiosError: createAxiosError\n};","map":null,"metadata":{},"sourceType":"script"}