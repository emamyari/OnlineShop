{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduxBatch = reduxBatch;\nfunction reduxBatch(next) {\n  var nextListeners = [];\n  var currentListeners = undefined;\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = nextListeners.slice();\n    }\n  }\n  function subscribe(listener) {\n    if (typeof listener !== \"function\") throw new Error(\"Invalid listener, expected a function\");\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) return;\n      ensureCanMutateNextListeners();\n      nextListeners.splice(nextListeners.indexOf(listener), 1);\n      isSubscribed = false;\n    };\n  }\n  function notifyListeners() {\n    var listeners = nextListeners;\n    for (var t = 0; t < listeners.length; ++t) {\n      currentListeners = listeners;\n      listeners[t]();\n    }\n  }\n  return function () {\n    var store = next.apply(undefined, arguments);\n    var receivedNotification = false;\n    var inDispatch = false;\n    function dispatchRecurse(action) {\n      return Array.isArray(action) ? action.map(function (subAction) {\n        return dispatchRecurse(subAction);\n      }) : store.dispatch(action);\n    }\n    function dispatch(action) {\n      var reentrant = inDispatch;\n      if (!reentrant) {\n        receivedNotification = false;\n        inDispatch = true;\n      }\n      var result = dispatchRecurse(action);\n      var requiresNotification = receivedNotification && !reentrant;\n      if (!reentrant) {\n        receivedNotification = false;\n        inDispatch = false;\n      }\n      if (requiresNotification) notifyListeners();\n      return result;\n    }\n    store.subscribe(function () {\n      if (inDispatch) {\n        receivedNotification = true;\n      } else {\n        notifyListeners();\n      }\n    });\n    return Object.assign({}, store, {\n      dispatch: dispatch,\n      subscribe: subscribe\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}