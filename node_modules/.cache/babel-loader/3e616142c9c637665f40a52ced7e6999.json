{"ast":null,"code":"/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\nexport function removeStorage(key) {\n  try {\n    localStorage.setItem(key, \"\");\n    localStorage.setItem(key + \"_expiresIn\", \"\");\n  } catch (e) {\n    console.log(\"removeStorage: Error removing key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n  return true;\n}\n\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\nexport function getStorage(key) {\n  var now = Date.now(); //epoch time, lets deal only with integer\n  // set expiration for storage\n  var expiresIn = localStorage.getItem(key + \"_expiresIn\");\n  if (expiresIn === undefined || expiresIn === null) {\n    expiresIn = 0;\n  }\n  expiresIn = Math.abs(expiresIn);\n  if (expiresIn < now) {\n    // Expired\n    removeStorage(key);\n    return null;\n  } else {\n    try {\n      var value = localStorage.getItem(key);\n      return value;\n    } catch (e) {\n      console.log(\"getStorage: Error reading key [\" + key + \"] from localStorage: \" + JSON.stringify(e));\n      return null;\n    }\n  }\n}\n\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\nexport function setStorage(key, value, expires) {\n  if (expires === undefined || expires === null) {\n    expires = 24 * 60 * 60; // default: seconds for 1 day\n  }\n\n  var now = Date.now(); //millisecs since epoch time, lets deal only with integer\n  var schedule = now + expires * 1000;\n  try {\n    localStorage.setItem(key, value);\n    localStorage.setItem(key + \"_expiresIn\", schedule);\n  } catch (e) {\n    console.log(\"setStorage: Error setting key [\" + key + \"] in localStorage: \" + JSON.stringify(e));\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["removeStorage","key","localStorage","setItem","e","console","log","JSON","stringify","getStorage","now","Date","expiresIn","getItem","undefined","Math","abs","value","setStorage","expires","schedule"],"sources":["C:/Users/Emamyari/Desktop/metapp/demo2/src/_metronic/_helpers/LocalStorageHelpers.js"],"sourcesContent":["\r\n/*  removeStorage: removes a key from localStorage and its sibling expiracy key\r\n    params:\r\n        key <string>     : localStorage key to remove\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function removeStorage(key) {\r\n    try {\r\n        localStorage.setItem(key, \"\");\r\n        localStorage.setItem(key + \"_expiresIn\", \"\");\r\n    } catch (e) {\r\n        console.log(\r\n            \"removeStorage: Error removing key [\" +\r\n            key +\r\n            \"] from localStorage: \" +\r\n            JSON.stringify(e)\r\n        );\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*  getStorage: retrieves a key from localStorage previously set with setStorage().\r\n    params:\r\n        key <string> : localStorage key\r\n    returns:\r\n        <string> : value of localStorage key\r\n        null : in case of expired key or failure\r\n */\r\nexport function getStorage(key) {\r\n    const now = Date.now(); //epoch time, lets deal only with integer\r\n    // set expiration for storage\r\n    let expiresIn = localStorage.getItem(key + \"_expiresIn\");\r\n    if (expiresIn === undefined || expiresIn === null) {\r\n        expiresIn = 0;\r\n    }\r\n\r\n    expiresIn = Math.abs(expiresIn);\r\n    if (expiresIn < now) {\r\n        // Expired\r\n        removeStorage(key);\r\n        return null;\r\n    } else {\r\n        try {\r\n            const value = localStorage.getItem(key);\r\n            return value;\r\n        } catch (e) {\r\n            console.log(\r\n                \"getStorage: Error reading key [\" +\r\n                key +\r\n                \"] from localStorage: \" +\r\n                JSON.stringify(e)\r\n            );\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n/*  setStorage: writes a key into localStorage setting a expire time\r\n    params:\r\n        key <string>     : localStorage key\r\n        value <string>   : localStorage value\r\n        expires <number> : number of seconds from now to expire the key\r\n    returns:\r\n        <boolean> : telling if operation succeeded\r\n */\r\nexport function setStorage(key, value, expires) {\r\n    if (expires === undefined || expires === null) {\r\n        expires = 24 * 60 * 60; // default: seconds for 1 day\r\n    }\r\n\r\n    const now = Date.now(); //millisecs since epoch time, lets deal only with integer\r\n    const schedule = now + expires * 1000;\r\n    try {\r\n        localStorage.setItem(key, value);\r\n        localStorage.setItem(key + \"_expiresIn\", schedule);\r\n    } catch (e) {\r\n        console.log(\r\n            \"setStorage: Error setting key [\" +\r\n            key +\r\n            \"] in localStorage: \" +\r\n            JSON.stringify(e)\r\n        );\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,GAAG,EAAE;EAC/B,IAAI;IACAC,YAAY,CAACC,OAAO,CAACF,GAAG,EAAE,EAAE,CAAC;IAC7BC,YAAY,CAACC,OAAO,CAACF,GAAG,GAAG,YAAY,EAAE,EAAE,CAAC;EAChD,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRC,OAAO,CAACC,GAAG,CACP,qCAAqC,GACrCL,GAAG,GACH,uBAAuB,GACvBM,IAAI,CAACC,SAAS,CAACJ,CAAC,CACpB,CAAC;IACD,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,UAAUA,CAACR,GAAG,EAAE;EAC5B,IAAMS,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC;EACxB;EACA,IAAIE,SAAS,GAAGV,YAAY,CAACW,OAAO,CAACZ,GAAG,GAAG,YAAY,CAAC;EACxD,IAAIW,SAAS,KAAKE,SAAS,IAAIF,SAAS,KAAK,IAAI,EAAE;IAC/CA,SAAS,GAAG,CAAC;EACjB;EAEAA,SAAS,GAAGG,IAAI,CAACC,GAAG,CAACJ,SAAS,CAAC;EAC/B,IAAIA,SAAS,GAAGF,GAAG,EAAE;IACjB;IACAV,aAAa,CAACC,GAAG,CAAC;IAClB,OAAO,IAAI;EACf,CAAC,MAAM;IACH,IAAI;MACA,IAAMgB,KAAK,GAAGf,YAAY,CAACW,OAAO,CAACZ,GAAG,CAAC;MACvC,OAAOgB,KAAK;IAChB,CAAC,CAAC,OAAOb,CAAC,EAAE;MACRC,OAAO,CAACC,GAAG,CACP,iCAAiC,GACjCL,GAAG,GACH,uBAAuB,GACvBM,IAAI,CAACC,SAAS,CAACJ,CAAC,CACpB,CAAC;MACD,OAAO,IAAI;IACf;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,UAAUA,CAACjB,GAAG,EAAEgB,KAAK,EAAEE,OAAO,EAAE;EAC5C,IAAIA,OAAO,KAAKL,SAAS,IAAIK,OAAO,KAAK,IAAI,EAAE;IAC3CA,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAC5B;;EAEA,IAAMT,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC;EACxB,IAAMU,QAAQ,GAAGV,GAAG,GAAGS,OAAO,GAAG,IAAI;EACrC,IAAI;IACAjB,YAAY,CAACC,OAAO,CAACF,GAAG,EAAEgB,KAAK,CAAC;IAChCf,YAAY,CAACC,OAAO,CAACF,GAAG,GAAG,YAAY,EAAEmB,QAAQ,CAAC;EACtD,CAAC,CAAC,OAAOhB,CAAC,EAAE;IACRC,OAAO,CAACC,GAAG,CACP,iCAAiC,GACjCL,GAAG,GACH,qBAAqB,GACrBM,IAAI,CAACC,SAAS,CAACJ,CAAC,CACpB,CAAC;IACD,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module"}