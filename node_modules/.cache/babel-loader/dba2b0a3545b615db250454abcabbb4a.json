{"ast":null,"code":"import _defineProperty from \"D:\\\\Metronic 7.2.9\\\\theme\\\\react\\\\OnlineShop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nvar hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n}\n// TODO: We should provide initial value here\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer,\n  IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n  var _ref = options || {},\n    _ref$intlPropName = _ref.intlPropName,\n    intlPropName = _ref$intlPropName === void 0 ? 'intl' : _ref$intlPropName,\n    _ref$forwardRef = _ref.forwardRef,\n    forwardRef = _ref$forwardRef === void 0 ? false : _ref$forwardRef,\n    _ref$enforceContext = _ref.enforceContext,\n    enforceContext = _ref$enforceContext === void 0 ? true : _ref$enforceContext;\n  var WithIntl = function WithIntl(props) {\n    return React.createElement(IntlConsumer, null, function (intl) {\n      if (enforceContext) {\n        invariantIntlContext(intl);\n      }\n      return React.createElement(WrappedComponent, Object.assign({}, props, _defineProperty({}, intlPropName, intl), {\n        ref: forwardRef ? props.forwardedRef : null\n      }));\n    });\n  };\n  WithIntl.displayName = \"injectIntl(\".concat(getDisplayName(WrappedComponent), \")\");\n  WithIntl.WrappedComponent = WrappedComponent;\n  if (forwardRef) {\n    return hoistNonReactStatics(React.forwardRef(function (props, ref) {\n      return React.createElement(WithIntl, Object.assign({}, props, {\n        forwardedRef: ref\n      }));\n    }), WrappedComponent);\n  }\n  return hoistNonReactStatics(WithIntl, WrappedComponent);\n}","map":null,"metadata":{},"sourceType":"module"}